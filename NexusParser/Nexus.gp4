grammar Nexus;

/* Parser */

file_declaration :   class
                   | extension_function ;

file : file_declaration* ;

class : CLASS name=IDENTIFIER LEFT_CURLY_BRACE class_member* RIGHT_CURLY_BRACE ;

class_member :    CPP_BLOCK
                | variable_declaration
                ;

type :    IDENTIFIER ARRAY_DECLARATION* #namedType
        | LEFT_BRACE type (COMMA type)*  RIGHT_BRACE ARRAY_DECLARATION* #tupleType
        | LEFT_BRACKET key=type ARROW_RIGHT value=type RIGHT_BRACKET ARRAY_DECLARATION* #mapType
	;

variable_declaration : type IDENTIFIER (EQUAL expression)? COLON ;

function_parameter : type IDENTIFIER (EQUAL expression)?;

function_declaration : type IDENTIFIER LEFT_BRACE (function_parameter (COMMA function_parameter)*)? RIGHT_BRACE
                       LEFT_CURLY_BRACE function_body RIGHT_CURLY_BRACE ;

assignment_statement : left=expression EQUAL right=expression COLON ;

return_statement : RETURN expression COLON ;

variable_statement : type IDENTIFIER (EQUAL expression)? COLON ;

tuple_explosion_expression :      IDENTIFIER
                                | array_access
                                | function_call
                                ;

tuple_explosion_statement : IDENTIFIER IDENTIFIER (COMMA IDENTIFIER)* EQUAL tuple_explosion_expression COLON ;

if_statement :  IF LEFT_BRACE comparison RIGHT_BRACE
                LEFT_CURLY_BRACE then=function_body RIGHT_CURLY_BRACE
                ELSE LEFT_CURLY_BRACE else=function_body RIGHT_CURLY_BRACE ;

while_statement : WHILE LEFT_BRACE comparison RIGHT_BRACE
                  LEFT_CURLY_BRACE function_body RIGHT_CURLY_BRACE ;

for_init :        assignment_statement
                | variable_statement ;

for_statement : FOR LEFT_BRACE for_init comparison COLON expression RIGHT_BRACE
                LEFT_CURLY_BRACE function_body RIGHT_CURLY_BRACE ;

function_call : IDENTIFIER LEFT_BRACE (expression (COMMA expression)*)? RIGHT_BRACE ;

function_body : function_body_statement * ;

function_body_statement :
                  CPP_BLOCK
                | assignment_statement
                | return_statement
                | function_declaration
                | variable_statement
                | if_statement
                | while_statement
                | for_statement
                | function_call COLON
                | tuple_explosion_statement ;

key_value_pair : expression ARROW_RIGHT expression ;

expression :	  expression STAR expression #mul
                | expression SLASH expression #div
                | expression PLUS expression #add
                | expression MINUS expression #sub
                | LEFT_BRACE expression (COMMA expression)+ RIGHT_BRACE #tuple
                | LEFT_BRACE expression RIGHT_BRACE #paren
                | LEFT_BRACKET expression(COMMA expression)* RIGHT_BRACKET #array
                | LEFT_BRACKET key_value_pair (COMMA key_value_pair)* RIGHT_BRACKET #map
                | expression RANGE expression #range
                | expression EQUAL expression #test
                | CPP_BLOCK #cppBlock
                | factor #fact ;

boolean : TRUE | FALSE ;

array_access : IDENTIFIER LEFT_BRACKET expression RIGHT_BRACKET ;

number :  INTEGER INTEGER_SUFFIX?
        | REAL REAL_SUFFIX? ;

quoted_text : APOSTROPHE text=.*? APOSTROPHE ;

factor :      number
            | boolean
            | BINARY
            | HEX
            | quoted_text
            | array_access
            | IDENTIFIER ;

comparison :      expression EQUAL expression
                | expression LESS expression
                | expression LESS_EQUAL expression
                | expression GREATER expression
                | expression GREATER_EQUAL expression ;

extension_type :  IDENTIFIER
                | type
                ;

extension_function : returnType=type extensionType=type DOT name=IDENTIFIER LEFT_BRACE (function_parameter (COMMA function_parameter)*)? RIGHT_BRACE
                     LEFT_CURLY_BRACE function_body RIGHT_CURLY_BRACE ;

/* Lexer */

COMMENT : '//' ~('\r'|'\n')* -> skip ;
MULTI_LINE_COMMENT : '/*' .*? '*/' -> skip ;
CPP_BLOCK : 'c++' WHITESPACE* LEFT_CURLY_BRACE WHITESPACE* .*? WHITESPACE* RIGHT_CURLY_BRACE ;
CLASS : 'class' ;
LEFT_CURLY_BRACE : '{' ;
RIGHT_CURLY_BRACE : '}' ;
LEFT_BRACE : '(' ;
RIGHT_BRACE : ')' ;
ARRAY_DECLARATION : '[]' ;
LEFT_BRACKET : '[' ;
RIGHT_BRACKET : ']' ;
COLON : ';' ;
ARROW_RIGHT : '->' ;
BINARY : ('b'|'B') 'x' ('0'|'1')+ ;
HEX : '0x' [0-9A-F]+ ;
INTEGER : ('-'|'+')?[0-9]+(','[0-9]+)* ;
REAL : ('-'|'+')?[0-9]+'.'[0-9]* ;
IF : 'if' ;
ELSE : 'else' ;
ELSE_IF : ELSE IF ;
WHILE : 'while' ;
FOR : 'for' ;
APOSTROPHE : '"' ;
EQUAL : '=' ;
LESS : '<' ;
LESS_EQUAL : '<=' ;
GREATER : '>' ;
GREATER_EQUAL : '>=' ;
TRUE : 'true' ;
FALSE : 'false' ;
PLUS : '+' ;
MINUS : '-' ;
STAR: '*' ;
SLASH: '/' ;
COMMA : ',' ;
RETURN : 'return' ;
RANGE : '..' ;
DOT : '.' ;
CPP : 'c++' ;
INTEGER_SUFFIX : '_' ('i'|'u') ('8'|'16'|'32'|'64') ;
REAL_SUFFIX : '_f' ('32'|'64') | 'f' | 'd' ;
IDENTIFIER : [a-zA-Z_-][a-zA-Z0-9_-]* ;
WHITESPACE : [ \r\t\n]+ -> skip ;
