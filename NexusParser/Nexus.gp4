grammar Nexus;

/* Parser */

file_declaration : class_declaration
                 | function_declaration
                 | cpp_block
                 ;

cpp_block : CPP_BLOCK ;

file : file_declaration* ;

class_declaration : CLASS name=IDENTIFIER template_list? LEFT_CURLY_BRACE class_member* RIGHT_CURLY_BRACE ;

class_member : cpp_block
             | variable_declaration
             | include COLON
             ;

include : INCLUDE LESS path=.*? GREATER #farInclude
        | INCLUDE APOSTROPHE path=.*? APOSTROPHE #nearInclude
        ;

type : IDENTIFIER template_list? ARRAY_DECLARATION* #namedType
     | LEFT_BRACE type (COMMA type)*  RIGHT_BRACE ARRAY_DECLARATION* #tupleType
     | LEFT_BRACKET key=type ARROW_RIGHT value=type RIGHT_BRACKET ARRAY_DECLARATION* #mapType
     | CPP_BLOCK #cppType
     ;

variable_declaration : type IDENTIFIER template_list? COLON ;

function_parameter : type IDENTIFIER;

function_body : function_body_statement* ;

function_declaration : returnType=type (extensionType=type (DOT | DOUBLE_COLON))?
                       (OPERATOR operator | name=IDENTIFIER)
                       template_list?
                       LEFT_BRACE (function_parameter (COMMA function_parameter)*)? RIGHT_BRACE
                       LEFT_CURLY_BRACE function_body RIGHT_CURLY_BRACE ;

assignment_statement : left=expression EQUAL right=expression COLON ;

return_statement : RETURN expression COLON ;

// variable_statement : type IDENTIFIER COLON ;

tuple_explosion_statement : IDENTIFIER IDENTIFIER (COMMA IDENTIFIER)* EQUAL expression COLON ;

if_statement : IF LEFT_BRACE expression RIGHT_BRACE
               LEFT_CURLY_BRACE then=function_body RIGHT_CURLY_BRACE
               (ELSE LEFT_CURLY_BRACE otherwise=function_body RIGHT_CURLY_BRACE)? ;

while_statement : WHILE LEFT_BRACE expression RIGHT_BRACE
                  LEFT_CURLY_BRACE function_body RIGHT_CURLY_BRACE ;

// for_init : assignment_statement
//          | variable_statement
//          ;

for_statement : FOR LEFT_BRACE expression COLON expression COLON expression RIGHT_BRACE
                LEFT_CURLY_BRACE function_body RIGHT_CURLY_BRACE ;

function_call_expression : IDENTIFIER LEFT_BRACE (expression (COMMA expression)*)? RIGHT_BRACE ;

include_statement : include COLON ;

expression_statement : expression COLON ;

function_body_statement : assignment_statement
                        | return_statement
                        | function_declaration
                        // | variable_statement
                        | if_statement
                        | while_statement
                        | for_statement
                        | tuple_explosion_statement
                        | include_statement
                        | expression_statement
                        | cpp_block
                        ;
                        
key_value_pair : expression ARROW_RIGHT expression ;

expression : //expression shorthand_operator #postfixOperatorExpression
           //| shorthand_operator expression #prefixOperatorExpression
             element=expression DOT member=IDENTIFIER #memberAccessExpression
           | expression (DOT | DOUBLE_COLON) function_call_expression #extensionFunctionCallExpression
           | type IDENTIFIER #variableDeclaration
           | LEFT_BRACE expression (COMMA expression)+ RIGHT_BRACE #tupleLiteral
           | LEFT_BRACE expression RIGHT_BRACE #paren
           | LEFT_BRACKET expression(COMMA expression)* RIGHT_BRACKET #arrayLiteral
           | LEFT_BRACKET key_value_pair (COMMA key_value_pair)* RIGHT_BRACKET #mapLiteral
           | NEW type LEFT_BRACE (expression (COMMA expression)*)? RIGHT_BRACE #newExpression
           | expression RANGE expression #rangeLiteral
           | expression LEFT_BRACKET expression RIGHT_BRACKET #arrayAccessExpression
           | function_call_expression #functionCallExpression
           | expression math_operator expression #mathematicOperation
           | CPP_BLOCK #cppBlockExpression
           | expression comparison_operator expression #comparisonOperation
           | expression logical_operator expression #logicalOperation
           | expression EQUAL expression #assignmentExpression
           | factor #fact
           ;

truth_value : TRUE
            | FALSE
            ;

number : INTEGER INTEGER_SUFFIX?
       | REAL REAL_SUFFIX?
       ;

quoted_text : APOSTROPHE text=.*? APOSTROPHE ;

factor : number
       | truth_value
       | BINARY
       | HEX
       | quoted_text
       | IDENTIFIER
       ;

operator : math_operator
         | comparison_operator
         | logical_operator
         | equal_operator=EQUAL
         ;

math_operator : PLUS EQUAL?
              | MINUS EQUAL?
              | STAR EQUAL?
              | SLASH EQUAL?
              | ARRAY_DECLARATION
              ;

comparison_operator : LESS
                    | GREATER
                    | LESS EQUAL
                    | GREATER EQUAL
                    | EQUAL EQUAL
                    ;

logical_operator : AMPERSAND AMPERSAND?
                 | PIPE PIPE?
                 | CARET
                 ;

shorthand_operator : PLUS
                   | MINUS
                   | PLUS PLUS
                   | MINUS MINUS
                   ;

template_list_declaration : TEMPLATE template_list ;

template_list : LESS ((IDENTIFIER (COMMA IDENTIFIER)*) DOT_DOT_DOT?) GREATER ;

/* Lexer */

COMMENT : '//' ~('\r'|'\n')* -> skip ;
MULTI_LINE_COMMENT : '/*' .*? '*/' -> skip ;
CPP_BLOCK : 'c++' WHITESPACE* LEFT_CURLY_BRACE PIPE WHITESPACE* .*? WHITESPACE* PIPE RIGHT_CURLY_BRACE ;
CLASS : 'class' ;
DOT_DOT_DOT : '...' ;
LEFT_CURLY_BRACE : '{' ;
RIGHT_CURLY_BRACE : '}' ;
LEFT_BRACE : '(' ;
RIGHT_BRACE : ')' ;
ARRAY_DECLARATION : '[]' ;
LEFT_BRACKET : '[' ;
RIGHT_BRACKET : ']' ;
COLON : ';' ;
ARROW_RIGHT : '->' ;
BINARY : ('b'|'B') 'x' ('0'|'1')+ ;
HEX : '0x' [0-9A-F]+ ;
INTEGER : ('-'|'+')?[0-9]+(','[0-9]+)* ;
REAL : ('-'|'+')?[0-9]+'.'[0-9]* ;
IF : 'if' ;
ELSE : 'else' ;
ELSE_IF : ELSE IF ;
WHILE : 'while' ;
FOR : 'for' ;
INCLUDE : 'include' ;
TEMPLATE : 'template' ;
NEW : 'new' ;
APOSTROPHE : '"' ;
EQUAL : '=' ;
LESS : '<' ;
GREATER : '>' ;
TRUE : 'true' ;
FALSE : 'false' ;
PLUS : '+' ;
MINUS : '-' ;
STAR: '*' ;
SLASH: '/' ;
COMMA : ',' ;
PIPE : '|' ;
AMPERSAND : '&' ;
CARET : '^' ;
RETURN : 'return' ;
OPERATOR : 'operator' ;
RANGE : '..' ;
DOT : '.' ;
DOUBLE_COLON : '::' ;
CPP : 'c++' ;
INTEGER_SUFFIX : '_' ('i'|'u') ('8'|'16'|'32'|'64') ;
REAL_SUFFIX : '_f' ('32'|'64') | 'f' | 'd' ;
IDENTIFIER : [a-zA-Z_-][a-zA-Z0-9_]* ;
WHITESPACE : [ \r\t\n]+ -> skip ;
