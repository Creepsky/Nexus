class i8
{
    include <cstdint>;
    c++ {|int8_t|} value;
}

i8 safeAdditioni8<T>(i8 lhs, T rhs) {
    safeAddition(lhs, rhs);
    return new i8(c++ {|static_cast<int8_t>(lhs.value + rhs.value)|});
}

i8 safeSubtractioni8<T>(i8 lhs, T rhs) {
    safeSubtraction(lhs, rhs);
    return new i8(c++ {|static_cast<int8_t>(lhs.value - rhs.value)|});
}

i8 safeMultiplicationi8<T>(i8 lhs, T rhs) {
    safeMultiplication(lhs, rhs);
    return new i8(c++ {|static_cast<int8_t>(lhs.value * rhs.value)|});
}

f64 safeDivisioni8<T>(i8 lhs, T rhs) {
    return safeDivision(lhs, rhs);
}

/* Addition */

i8 i8.operator+(i8 rhs) {
    return safeAdditioni8(this, rhs);
}

i8 i8.operator+(u8 rhs) {
    return safeAdditioni8(this, rhs);
}

i8 i8.operator+(i16 rhs) {
    return safeAdditioni8(this, rhs);
}

i8 i8.operator+(u16 rhs) {
    return safeAdditioni8(this, rhs);
}

i8 i8.operator+(i32 rhs) {
    return safeAdditioni8(this, rhs);
}

i8 i8.operator+(u32 rhs) {
    return safeAdditioni8(this, rhs);
}

i8 i8.operator+(i64 rhs) {
    return safeAdditioni8(this, rhs);
}

i8 i8.operator+(u64 rhs) {
    return safeAdditioni8(this, rhs);
}

i8 i8.operator+(isize rhs) {
    return safeAdditioni8(this, rhs);
}

i8 i8.operator+(usize rhs) {
    return safeAdditioni8(this, rhs);
}

i8 i8.operator+(f32 rhs) {
    return safeAdditioni8(this, rhs);
}

i8 i8.operator+(f64 rhs) {
    return safeAdditioni8(this, rhs);
}

/* Subtraction */

i8 i8.operator-(i8 rhs) {
    return safeSubtractioni8(this, rhs);
}

i8 i8.operator-(u8 rhs) {
    return safeSubtractioni8(this, rhs);
}

i8 i8.operator-(i16 rhs) {
    return safeSubtractioni8(this, rhs);
}

i8 i8.operator-(u16 rhs) {
    return safeSubtractioni8(this, rhs);
}

i8 i8.operator-(i32 rhs) {
    return safeSubtractioni8(this, rhs);
}

i8 i8.operator-(u32 rhs) {
    return safeSubtractioni8(this, rhs);
}

i8 i8.operator-(i64 rhs) {
    return safeSubtractioni8(this, rhs);
}

i8 i8.operator-(u64 rhs) {
    return safeSubtractioni8(this, rhs);
}

i8 i8.operator-(isize rhs) {
    return safeSubtractioni8(this, rhs);
}

i8 i8.operator-(usize rhs) {
    return safeSubtractioni8(this, rhs);
}

i8 i8.operator-(f32 rhs) {
    return safeSubtractioni8(this, rhs);
}

i8 i8.operator-(f64 rhs) {
    return safeSubtractioni8(this, rhs);
}

/* Multiplication */

i8 i8.operator*(i8 rhs) {
    return safeMultiplicationi8(this, rhs);
}

i8 i8.operator*(u8 rhs) {
    return safeMultiplicationi8(this, rhs);
}

i8 i8.operator*(i16 rhs) {
    return safeMultiplicationi8(this, rhs);
}

i8 i8.operator*(u16 rhs) {
    return safeMultiplicationi8(this, rhs);
}

i8 i8.operator*(i32 rhs) {
    return safeMultiplicationi8(this, rhs);
}

i8 i8.operator*(u32 rhs) {
    return safeMultiplicationi8(this, rhs);
}

i8 i8.operator*(i64 rhs) {
    return safeMultiplicationi8(this, rhs);
}

i8 i8.operator*(u64 rhs) {
    return safeMultiplicationi8(this, rhs);
}

i8 i8.operator*(isize rhs) {
    return safeMultiplicationi8(this, rhs);
}

i8 i8.operator*(usize rhs) {
    return safeMultiplicationi8(this, rhs);
}

i8 i8.operator*(f32 rhs) {
    return safeMultiplicationi8(this, rhs);
}

i8 i8.operator*(f64 rhs) {
    return safeMultiplicationi8(this, rhs);
}

/* Division */

f64 i8.operator/(i8 rhs) {
    return safeDivisioni8(this, rhs);
}

f64 i8.operator/(u8 rhs) {
    return safeDivisioni8(this, rhs);
}

f64 i8.operator/(i16 rhs) {
    return safeDivisioni8(this, rhs);
}

f64 i8.operator/(u16 rhs) {
    return safeDivisioni8(this, rhs);
}

f64 i8.operator/(i32 rhs) {
    return safeDivisioni8(this, rhs);
}

f64 i8.operator/(u32 rhs) {
    return safeDivisioni8(this, rhs);
}

f64 i8.operator/(i64 rhs) {
    return safeDivisioni8(this, rhs);
}

f64 i8.operator/(u64 rhs) {
    return safeDivisioni8(this, rhs);
}

f64 i8.operator/(isize rhs) {
    return safeDivisioni8(this, rhs);
}

f64 i8.operator/(usize rhs) {
    return safeDivisioni8(this, rhs);
}

f64 i8.operator/(f32 rhs) {
    return safeDivisioni8(this, rhs);
}

f64 i8.operator/(f64 rhs) {
    return safeDivisioni8(this, rhs);
}

/* Less */

bool i8.operator<(i8 rhs) {
    return new bool(this.value < rhs.value);
}

bool i8.operator<(u8 rhs) {
    return new bool(this.value < rhs.value);
}

bool i8.operator<(i16 rhs) {
    return new bool(this.value < rhs.value);
}

bool i8.operator<(u16 rhs) {
    return new bool(this.value < rhs.value);
}

bool i8.operator<(i32 rhs) {
    return new bool(this.value < rhs.value);
}

bool i8.operator<(u32 rhs) {
    return new bool(this.value < rhs.value);
}

bool i8.operator<(i64 rhs) {
    return new bool(this.value < rhs.value);
}

bool i8.operator<(u64 rhs) {
    return new bool(this.value < rhs.value);
}

bool i8.operator<(isize rhs) {
    return new bool(this.value < rhs.value);
}

bool i8.operator<(usize rhs) {
    return new bool(this.value < rhs.value);
}

bool i8.operator<(f32 rhs) {
    return new bool(this.value < rhs.value);
}

bool i8.operator<(f64 rhs) {
    return new bool(this.value < rhs.value);
}

/* Greater */

bool i8.operator>(i8 rhs) {
    return new bool(this.value > rhs.value);
}

bool i8.operator>(u8 rhs) {
    return new bool(this.value > rhs.value);
}

bool i8.operator>(i16 rhs) {
    return new bool(this.value > rhs.value);
}

bool i8.operator>(u16 rhs) {
    return new bool(this.value > rhs.value);
}

bool i8.operator>(i32 rhs) {
    return new bool(this.value > rhs.value);
}

bool i8.operator>(u32 rhs) {
    return new bool(this.value > rhs.value);
}

bool i8.operator>(i64 rhs) {
    return new bool(this.value > rhs.value);
}

bool i8.operator>(u64 rhs) {
    return new bool(this.value > rhs.value);
}

bool i8.operator>(isize rhs) {
    return new bool(this.value > rhs.value);
}

bool i8.operator>(usize rhs) {
    return new bool(this.value > rhs.value);
}

bool i8.operator>(f32 rhs) {
    return new bool(this.value > rhs.value);
}

bool i8.operator>(f64 rhs) {
    return new bool(this.value > rhs.value);
}

/* Less Equal */

bool i8.operator<=(i8 rhs) {
    return new bool(this.value <= rhs.value);
}

bool i8.operator<=(u8 rhs) {
    return new bool(this.value <= rhs.value);
}

bool i8.operator<=(i16 rhs) {
    return new bool(this.value <= rhs.value);
}

bool i8.operator<=(u16 rhs) {
    return new bool(this.value <= rhs.value);
}

bool i8.operator<=(i32 rhs) {
    return new bool(this.value <= rhs.value);
}

bool i8.operator<=(u32 rhs) {
    return new bool(this.value <= rhs.value);
}

bool i8.operator<=(i64 rhs) {
    return new bool(this.value <= rhs.value);
}

bool i8.operator<=(u64 rhs) {
    return new bool(this.value <= rhs.value);
}

bool i8.operator<=(isize rhs) {
    return new bool(this.value <= rhs.value);
}

bool i8.operator<=(usize rhs) {
    return new bool(this.value <= rhs.value);
}

bool i8.operator<=(f32 rhs) {
    return new bool(this.value <= rhs.value);
}

bool i8.operator<=(f64 rhs) {
    return new bool(this.value <= rhs.value);
}

/* Greater Equal */

bool i8.operator>=(i8 rhs) {
    return new bool(this.value >= rhs.value);
}

bool i8.operator>=(u8 rhs) {
    return new bool(this.value >= rhs.value);
}

bool i8.operator>=(i16 rhs) {
    return new bool(this.value >= rhs.value);
}

bool i8.operator>=(u16 rhs) {
    return new bool(this.value >= rhs.value);
}

bool i8.operator>=(i32 rhs) {
    return new bool(this.value >= rhs.value);
}

bool i8.operator>=(u32 rhs) {
    return new bool(this.value >= rhs.value);
}

bool i8.operator>=(i64 rhs) {
    return new bool(this.value >= rhs.value);
}

bool i8.operator>=(u64 rhs) {
    return new bool(this.value >= rhs.value);
}

bool i8.operator>=(isize rhs) {
    return new bool(this.value >= rhs.value);
}

bool i8.operator>=(usize rhs) {
    return new bool(this.value >= rhs.value);
}

bool i8.operator>=(f32 rhs) {
    return new bool(this.value >= rhs.value);
}

bool i8.operator>=(f64 rhs) {
    return new bool(this.value >= rhs.value);
}

i8 i8::minimum() {
    include <limits>;
    return new i8(c++ {|std::numeric_limits<int8_t>::min()|});
}

i8 i8::maximum() {
    include <limits>;
    return new i8(c++ {|std::numeric_limits<int8_t>::max()|});
}

bool i8::signed() {
    return true;
}
