class u32
{
    include <cstdint>;
    c++ {|uint32_t|} value;
    c++ {|explicit u32(uint32_t value) : value(value) { }|}
}

/* Addition */

u32 u32.operator+(i8 rhs) {
    return safeAddition(this, rhs);
}

u32 u32.operator+(u8 rhs) {
    return safeAddition(this, rhs);
}

u32 u32.operator+(i16 rhs) {
    return safeAddition(this, rhs);
}

u32 u32.operator+(u16 rhs) {
    return safeAddition(this, rhs);
}

u32 u32.operator+(i32 rhs) {
    return safeAddition(this, rhs);
}

u32 u32.operator+(u32 rhs) {
    return safeAddition(this, rhs);
}

u32 u32.operator+(i64 rhs) {
    return safeAddition(this, rhs);
}

u32 u32.operator+(u64 rhs) {
    return safeAddition(this, rhs);
}

u32 u32.operator+(isize rhs) {
    return safeAddition(this, rhs);
}

u32 u32.operator+(usize rhs) {
    return safeAddition(this, rhs);
}

u32 u32.operator+(f32 rhs) {
    return safeAddition(this, rhs);
}

u32 u32.operator+(f64 rhs) {
    return safeAddition(this, rhs);
}

/* Subtraction */

u32 u32.operator-(i8 rhs) {
    return safeSubtraction(this, rhs);
}

u32 u32.operator-(u8 rhs) {
    return safeSubtraction(this, rhs);
}

u32 u32.operator-(i16 rhs) {
    return safeSubtraction(this, rhs);
}

u32 u32.operator-(u16 rhs) {
    return safeSubtraction(this, rhs);
}

u32 u32.operator-(i32 rhs) {
    return safeSubtraction(this, rhs);
}

u32 u32.operator-(u32 rhs) {
    return safeSubtraction(this, rhs);
}

u32 u32.operator-(i64 rhs) {
    return safeSubtraction(this, rhs);
}

u32 u32.operator-(u64 rhs) {
    return safeSubtraction(this, rhs);
}

u32 u32.operator-(isize rhs) {
    return safeSubtraction(this, rhs);
}

u32 u32.operator-(usize rhs) {
    return safeSubtraction(this, rhs);
}

u32 u32.operator-(f32 rhs) {
    return safeSubtraction(this, rhs);
}

u32 u32.operator-(f64 rhs) {
    return safeSubtraction(this, rhs);
}

/* Multiplication */

u32 u32.operator*(i8 rhs) {
    return safeMultiplication(this, rhs);
}

u32 u32.operator*(u8 rhs) {
    return safeMultiplication(this, rhs);
}

u32 u32.operator*(i16 rhs) {
    return safeMultiplication(this, rhs);
}

u32 u32.operator*(u16 rhs) {
    return safeMultiplication(this, rhs);
}

u32 u32.operator*(i32 rhs) {
    return safeMultiplication(this, rhs);
}

u32 u32.operator*(u32 rhs) {
    return safeMultiplication(this, rhs);
}

u32 u32.operator*(i64 rhs) {
    return safeMultiplication(this, rhs);
}

u32 u32.operator*(u64 rhs) {
    return safeMultiplication(this, rhs);
}

u32 u32.operator*(isize rhs) {
    return safeMultiplication(this, rhs);
}

u32 u32.operator*(usize rhs) {
    return safeMultiplication(this, rhs);
}

u32 u32.operator*(f32 rhs) {
    return safeMultiplication(this, rhs);
}

u32 u32.operator*(f64 rhs) {
    return safeMultiplication(this, rhs);
}

/* Division */

u32 u32.operator/(i8 rhs) {
    return new u32(this.value / rhs.value);
}

u32 u32.operator/(u8 rhs) {
    return new u32(this.value / rhs.value);
}

u32 u32.operator/(i16 rhs) {
    return new u32(this.value / rhs.value);
}

u32 u32.operator/(u16 rhs) {
    return new u32(this.value / rhs.value);
}

u32 u32.operator/(i32 rhs) {
    return new u32(this.value / rhs.value);
}

u32 u32.operator/(u32 rhs) {
    return new u32(this.value / rhs.value);
}

u32 u32.operator/(i64 rhs) {
    return new u32(this.value / rhs.value);
}

u32 u32.operator/(u64 rhs) {
    return new u32(this.value / rhs.value);
}

u32 u32.operator/(isize rhs) {
    return new u32(this.value / rhs.value);
}

u32 u32.operator/(usize rhs) {
    return new u32(this.value / rhs.value);
}

u32 u32.operator/(f32 rhs) {
    return new u32(this.value / rhs.value);
}

u32 u32.operator/(f64 rhs) {
    return new u32(this.value / rhs.value);
}

/* Less */

bool u32.operator<(i8 rhs) {
    return new bool(this.value < rhs.value);
}

bool u32.operator<(u8 rhs) {
    return new bool(this.value < rhs.value);
}

bool u32.operator<(i16 rhs) {
    return new bool(this.value < rhs.value);
}

bool u32.operator<(u16 rhs) {
    return new bool(this.value < rhs.value);
}

bool u32.operator<(i32 rhs) {
    return new bool(this.value < rhs.value);
}

bool u32.operator<(u32 rhs) {
    return new bool(this.value < rhs.value);
}

bool u32.operator<(i64 rhs) {
    return new bool(this.value < rhs.value);
}

bool u32.operator<(u64 rhs) {
    return new bool(this.value < rhs.value);
}

bool u32.operator<(isize rhs) {
    return new bool(this.value < rhs.value);
}

bool u32.operator<(usize rhs) {
    return new bool(this.value < rhs.value);
}

bool u32.operator<(f32 rhs) {
    return new bool(this.value < rhs.value);
}

bool u32.operator<(f64 rhs) {
    return new bool(this.value < rhs.value);
}

/* Greater */

bool u32.operator>(i8 rhs) {
    return new bool(this.value > rhs.value);
}

bool u32.operator>(u8 rhs) {
    return new bool(this.value > rhs.value);
}

bool u32.operator>(i16 rhs) {
    return new bool(this.value > rhs.value);
}

bool u32.operator>(u16 rhs) {
    return new bool(this.value > rhs.value);
}

bool u32.operator>(i32 rhs) {
    return new bool(this.value > rhs.value);
}

bool u32.operator>(u32 rhs) {
    return new bool(this.value > rhs.value);
}

bool u32.operator>(i64 rhs) {
    return new bool(this.value > rhs.value);
}

bool u32.operator>(u64 rhs) {
    return new bool(this.value > rhs.value);
}

bool u32.operator>(isize rhs) {
    return new bool(this.value > rhs.value);
}

bool u32.operator>(usize rhs) {
    return new bool(this.value > rhs.value);
}

bool u32.operator>(f32 rhs) {
    return new bool(this.value > rhs.value);
}

bool u32.operator>(f64 rhs) {
    return new bool(this.value > rhs.value);
}

/* Less Equal */

bool u32.operator<=(i8 rhs) {
    return new bool(this.value <= rhs.value);
}

bool u32.operator<=(u8 rhs) {
    return new bool(this.value <= rhs.value);
}

bool u32.operator<=(i16 rhs) {
    return new bool(this.value <= rhs.value);
}

bool u32.operator<=(u16 rhs) {
    return new bool(this.value <= rhs.value);
}

bool u32.operator<=(i32 rhs) {
    return new bool(this.value <= rhs.value);
}

bool u32.operator<=(u32 rhs) {
    return new bool(this.value <= rhs.value);
}

bool u32.operator<=(i64 rhs) {
    return new bool(this.value <= rhs.value);
}

bool u32.operator<=(u64 rhs) {
    return new bool(this.value <= rhs.value);
}

bool u32.operator<=(isize rhs) {
    return new bool(this.value <= rhs.value);
}

bool u32.operator<=(usize rhs) {
    return new bool(this.value <= rhs.value);
}

bool u32.operator<=(f32 rhs) {
    return new bool(this.value <= rhs.value);
}

bool u32.operator<=(f64 rhs) {
    return new bool(this.value <= rhs.value);
}

/* Greater Equal */

bool u32.operator>=(i8 rhs) {
    return new bool(this.value >= rhs.value);
}

bool u32.operator>=(u8 rhs) {
    return new bool(this.value >= rhs.value);
}

bool u32.operator>=(i16 rhs) {
    return new bool(this.value >= rhs.value);
}

bool u32.operator>=(u16 rhs) {
    return new bool(this.value >= rhs.value);
}

bool u32.operator>=(i32 rhs) {
    return new bool(this.value >= rhs.value);
}

bool u32.operator>=(u32 rhs) {
    return new bool(this.value >= rhs.value);
}

bool u32.operator>=(i64 rhs) {
    return new bool(this.value >= rhs.value);
}

bool u32.operator>=(u64 rhs) {
    return new bool(this.value >= rhs.value);
}

bool u32.operator>=(isize rhs) {
    return new bool(this.value >= rhs.value);
}

bool u32.operator>=(usize rhs) {
    return new bool(this.value >= rhs.value);
}

bool u32.operator>=(f32 rhs) {
    return new bool(this.value >= rhs.value);
}

bool u32.operator>=(f64 rhs) {
    return new bool(this.value >= rhs.value);
}

isize u32::minimum() {
    include <limits>;
    return new isize(c++ {|
        std::numeric_limits<uint32_t>::min()
    |});
}

usize u32::maximum() {
    include <limits>;
    return new usize(c++ {|
        std::numeric_limits<uint32_t>::max()
    |});
}
