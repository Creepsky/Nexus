class i32
{
    include <cstdint>;
    c++ {|int32_t|} value;
}

i32 safeAdditioni32<T>(i32 lhs, T rhs) {
    safeAddition(lhs, rhs);
    return new i32(c++ {|static_cast<int32_t>(lhs.value + rhs.value)|});
}

i32 safeSubtractioni32<T>(i32 lhs, T rhs) {
    safeSubtraction(lhs, rhs);
    return new i32(c++ {|static_cast<int32_t>(lhs.value - rhs.value)|});
}

i32 safeMultiplicationi32<T>(i32 lhs, T rhs) {
    safeMultiplication(lhs, rhs);
    return new i32(c++ {|static_cast<int32_t>(lhs.value * rhs.value)|});
}

f64 safeDivisioni32<T>(i32 lhs, T rhs) {
    return safeDivision(lhs, rhs);
}

/* Addition */

i32 i32.operator+(i8 rhs) {
    return safeAdditioni32(this, rhs);
}

i32 i32.operator+(u8 rhs) {
    return safeAdditioni32(this, rhs);
}

i32 i32.operator+(i16 rhs) {
    return safeAdditioni32(this, rhs);
}

i32 i32.operator+(u16 rhs) {
    return safeAdditioni32(this, rhs);
}

i32 i32.operator+(i32 rhs) {
    return safeAdditioni32(this, rhs);
}

i32 i32.operator+(u32 rhs) {
    return safeAdditioni32(this, rhs);
}

i32 i32.operator+(i64 rhs) {
    return safeAdditioni32(this, rhs);
}

i32 i32.operator+(u64 rhs) {
    return safeAdditioni32(this, rhs);
}

i32 i32.operator+(isize rhs) {
    return safeAdditioni32(this, rhs);
}

i32 i32.operator+(usize rhs) {
    return safeAdditioni32(this, rhs);
}

i32 i32.operator+(f32 rhs) {
    return safeAdditioni32(this, rhs);
}

i32 i32.operator+(f64 rhs) {
    return safeAdditioni32(this, rhs);
}

/* Subtraction */

i32 i32.operator-(i8 rhs) {
    return safeSubtractioni32(this, rhs);
}

i32 i32.operator-(u8 rhs) {
    return safeSubtractioni32(this, rhs);
}

i32 i32.operator-(i16 rhs) {
    return safeSubtractioni32(this, rhs);
}

i32 i32.operator-(u16 rhs) {
    return safeSubtractioni32(this, rhs);
}

i32 i32.operator-(i32 rhs) {
    return safeSubtractioni32(this, rhs);
}

i32 i32.operator-(u32 rhs) {
    return safeSubtractioni32(this, rhs);
}

i32 i32.operator-(i64 rhs) {
    return safeSubtractioni32(this, rhs);
}

i32 i32.operator-(u64 rhs) {
    return safeSubtractioni32(this, rhs);
}

i32 i32.operator-(isize rhs) {
    return safeSubtractioni32(this, rhs);
}

i32 i32.operator-(usize rhs) {
    return safeSubtractioni32(this, rhs);
}

i32 i32.operator-(f32 rhs) {
    return safeSubtractioni32(this, rhs);
}

i32 i32.operator-(f64 rhs) {
    return safeSubtractioni32(this, rhs);
}

/* Multiplication */

i32 i32.operator*(i8 rhs) {
    return safeMultiplicationi32(this, rhs);
}

i32 i32.operator*(u8 rhs) {
    return safeMultiplicationi32(this, rhs);
}

i32 i32.operator*(i16 rhs) {
    return safeMultiplicationi32(this, rhs);
}

i32 i32.operator*(u16 rhs) {
    return safeMultiplicationi32(this, rhs);
}

i32 i32.operator*(i32 rhs) {
    return safeMultiplicationi32(this, rhs);
}

i32 i32.operator*(u32 rhs) {
    return safeMultiplicationi32(this, rhs);
}

i32 i32.operator*(i64 rhs) {
    return safeMultiplicationi32(this, rhs);
}

i32 i32.operator*(u64 rhs) {
    return safeMultiplicationi32(this, rhs);
}

i32 i32.operator*(isize rhs) {
    return safeMultiplicationi32(this, rhs);
}

i32 i32.operator*(usize rhs) {
    return safeMultiplicationi32(this, rhs);
}

i32 i32.operator*(f32 rhs) {
    return safeMultiplicationi32(this, rhs);
}

i32 i32.operator*(f64 rhs) {
    return safeMultiplicationi32(this, rhs);
}

/* Division */

f64 i32.operator/(i8 rhs) {
    return safeDivisioni32(this, rhs);
}

f64 i32.operator/(u8 rhs) {
    return safeDivisioni32(this, rhs);
}

f64 i32.operator/(i16 rhs) {
    return safeDivisioni32(this, rhs);
}

f64 i32.operator/(u16 rhs) {
    return safeDivisioni32(this, rhs);
}

f64 i32.operator/(i32 rhs) {
    return safeDivisioni32(this, rhs);
}

f64 i32.operator/(u32 rhs) {
    return safeDivisioni32(this, rhs);
}

f64 i32.operator/(i64 rhs) {
    return safeDivisioni32(this, rhs);
}

f64 i32.operator/(u64 rhs) {
    return safeDivisioni32(this, rhs);
}

f64 i32.operator/(isize rhs) {
    return safeDivisioni32(this, rhs);
}

f64 i32.operator/(usize rhs) {
    return safeDivisioni32(this, rhs);
}

f64 i32.operator/(f32 rhs) {
    return safeDivisioni32(this, rhs);
}

f64 i32.operator/(f64 rhs) {
    return safeDivisioni32(this, rhs);
}

/* Less */

bool i32.operator<(i8 rhs) {
    return new bool(this.value < rhs.value);
}

bool i32.operator<(u8 rhs) {
    return new bool(this.value < rhs.value);
}

bool i32.operator<(i16 rhs) {
    return new bool(this.value < rhs.value);
}

bool i32.operator<(u16 rhs) {
    return new bool(this.value < rhs.value);
}

bool i32.operator<(i32 rhs) {
    return new bool(this.value < rhs.value);
}

bool i32.operator<(u32 rhs) {
    return new bool(this.value < rhs.value);
}

bool i32.operator<(i64 rhs) {
    return new bool(this.value < rhs.value);
}

bool i32.operator<(u64 rhs) {
    return new bool(this.value < rhs.value);
}

bool i32.operator<(isize rhs) {
    return new bool(this.value < rhs.value);
}

bool i32.operator<(usize rhs) {
    return new bool(this.value < rhs.value);
}

bool i32.operator<(f32 rhs) {
    return new bool(this.value < rhs.value);
}

bool i32.operator<(f64 rhs) {
    return new bool(this.value < rhs.value);
}

/* Greater */

bool i32.operator>(i8 rhs) {
    return new bool(this.value > rhs.value);
}

bool i32.operator>(u8 rhs) {
    return new bool(this.value > rhs.value);
}

bool i32.operator>(i16 rhs) {
    return new bool(this.value > rhs.value);
}

bool i32.operator>(u16 rhs) {
    return new bool(this.value > rhs.value);
}

bool i32.operator>(i32 rhs) {
    return new bool(this.value > rhs.value);
}

bool i32.operator>(u32 rhs) {
    return new bool(this.value > rhs.value);
}

bool i32.operator>(i64 rhs) {
    return new bool(this.value > rhs.value);
}

bool i32.operator>(u64 rhs) {
    return new bool(this.value > rhs.value);
}

bool i32.operator>(isize rhs) {
    return new bool(this.value > rhs.value);
}

bool i32.operator>(usize rhs) {
    return new bool(this.value > rhs.value);
}

bool i32.operator>(f32 rhs) {
    return new bool(this.value > rhs.value);
}

bool i32.operator>(f64 rhs) {
    return new bool(this.value > rhs.value);
}

/* Less Equal */

bool i32.operator<=(i8 rhs) {
    return new bool(this.value <= rhs.value);
}

bool i32.operator<=(u8 rhs) {
    return new bool(this.value <= rhs.value);
}

bool i32.operator<=(i16 rhs) {
    return new bool(this.value <= rhs.value);
}

bool i32.operator<=(u16 rhs) {
    return new bool(this.value <= rhs.value);
}

bool i32.operator<=(i32 rhs) {
    return new bool(this.value <= rhs.value);
}

bool i32.operator<=(u32 rhs) {
    return new bool(this.value <= rhs.value);
}

bool i32.operator<=(i64 rhs) {
    return new bool(this.value <= rhs.value);
}

bool i32.operator<=(u64 rhs) {
    return new bool(this.value <= rhs.value);
}

bool i32.operator<=(isize rhs) {
    return new bool(this.value <= rhs.value);
}

bool i32.operator<=(usize rhs) {
    return new bool(this.value <= rhs.value);
}

bool i32.operator<=(f32 rhs) {
    return new bool(this.value <= rhs.value);
}

bool i32.operator<=(f64 rhs) {
    return new bool(this.value <= rhs.value);
}

/* Greater Equal */

bool i32.operator>=(i8 rhs) {
    return new bool(this.value >= rhs.value);
}

bool i32.operator>=(u8 rhs) {
    return new bool(this.value >= rhs.value);
}

bool i32.operator>=(i16 rhs) {
    return new bool(this.value >= rhs.value);
}

bool i32.operator>=(u16 rhs) {
    return new bool(this.value >= rhs.value);
}

bool i32.operator>=(i32 rhs) {
    return new bool(this.value >= rhs.value);
}

bool i32.operator>=(u32 rhs) {
    return new bool(this.value >= rhs.value);
}

bool i32.operator>=(i64 rhs) {
    return new bool(this.value >= rhs.value);
}

bool i32.operator>=(u64 rhs) {
    return new bool(this.value >= rhs.value);
}

bool i32.operator>=(isize rhs) {
    return new bool(this.value >= rhs.value);
}

bool i32.operator>=(usize rhs) {
    return new bool(this.value >= rhs.value);
}

bool i32.operator>=(f32 rhs) {
    return new bool(this.value >= rhs.value);
}

bool i32.operator>=(f64 rhs) {
    return new bool(this.value >= rhs.value);
}

/* add */

i32 i32&.operator+=(i8 rhs) {
    this.value += rhs.value;
    return this;
}

i32 i32&.operator+=(u8 rhs) {
    this.value += rhs.value;
    return this;
}

i32 i32&.operator+=(i16 rhs) {
    this.value += rhs.value;
    return this;
}

i32 i32&.operator+=(u16 rhs) {
    this.value += rhs.value;
    return this;
}

i32 i32&.operator+=(i32 rhs) {
    this.value += rhs.value;
    return this;
}

i32 i32&.operator+=(u32 rhs) {
    this.value += rhs.value;
    return this;
}

i32 i32&.operator+=(i64 rhs) {
    this.value += rhs.value;
    return this;
}

i32 i32&.operator+=(u64 rhs) {
    this.value += rhs.value;
    return this;
}

i32 i32&.operator+=(isize rhs) {
    this.value += rhs.value;
    return this;
}

i32 i32&.operator+=(usize rhs) {
    this.value += rhs.value;
    return this;
}

i32 i32&.operator+=(f32 rhs) {
    this.value += rhs.value;
    return this;
}

i32 i32&.operator+=(f64 rhs) {
    this.value += rhs.value;
    return this;
}

/* assign */

i32 i32&.operator=(i8 rhs) {
    c++ {|__this.value = rhs.value|};
    return this;
}

i32 i32&.operator=(u8 rhs) {
    c++ {|__this.value = rhs.value|};
    return this;
}

i32 i32&.operator=(i16 rhs) {
    c++ {|__this.value = rhs.value|};
    return this;
}

i32 i32&.operator=(u16 rhs) {
    c++ {|__this.value = rhs.value|};
    return this;
}

i32 i32&.operator=(i32 rhs) {
    c++ {|__this.value = rhs.value|};
    return this;
}

i32 i32&.operator=(u32 rhs) {
    c++ {|__this.value = rhs.value|};
    return this;
}

i32 i32&.operator=(i64 rhs) {
    c++ {|__this.value = rhs.value|};
    return this;
}

i32 i32&.operator=(u64 rhs) {
    c++ {|__this.value = rhs.value|};
    return this;
}

i32 i32&.operator=(isize rhs) {
    c++ {|__this.value = rhs.value|};
    return this;
}

i32 i32&.operator=(usize rhs) {
    c++ {|__this.value = rhs.value|};
    return this;
}

i32 i32&.operator=(f32 rhs) {
    c++ {|__this.value = rhs.value|};
    return this;
}

i32 i32&.operator=(f64 rhs) {
    c++ {|__this.value = rhs.value|};
    return this;
}

// bool i32.operator==<T>(T rhs) {
//     return new bool(this.value == rhs.value);
// }

// i32 i32.operator=(i64 rhs) {
//     return new i32(rhs.value);
// }

// i32 i32.operator+=<T>(T rhs) {
//     this.value += rhs.value;
//     return this;
// }

i32 i32::minimum() {
    include <limits>;
    return new i32(c++ {|std::numeric_limits<int32_t>::min()|});
}

i32 i32::maximum() {
    include <limits>;
    return new i32(c++ {|std::numeric_limits<int32_t>::max()|});
}

bool i32::signed() {
    return true;
}
