//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Nexus.gp4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class NexusParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, CLASS=2, LEFT_CURLY_BRACE=3, RIGHT_CURLY_BRACE=4, LEFT_BRACE=5, 
		RIGHT_BRACE=6, LEFT_BRACKET=7, RIGHT_BRACKET=8, COLON=9, ARROW_RIGHT=10, 
		BINARY=11, HEX=12, INTEGER=13, REAL=14, IF=15, ELSE=16, ELSE_IF=17, WHILE=18, 
		FOR=19, EQUAL=20, LESS=21, LESS_EQUAL=22, GREATER=23, GREATER_EQUAL=24, 
		QUOTED_TEXT=25, TRUE=26, FALSE=27, PLUS=28, MINUS=29, STAR=30, SLASH=31, 
		SET=32, GET=33, COMMA=34, RETURN=35, RANGE=36, DOT=37, INTEGER_SUFFIX=38, 
		REAL_SUFFIX=39, IDENTIFIER=40, WHITESPACE=41;
	public const int
		RULE_file_declaration = 0, RULE_file = 1, RULE_class = 2, RULE_class_member = 3, 
		RULE_tuple_declaration = 4, RULE_type = 5, RULE_variable_declaration = 6, 
		RULE_function_parameter = 7, RULE_function_declaration = 8, RULE_assignment_statement = 9, 
		RULE_return_statement = 10, RULE_variable_statement = 11, RULE_if_statement = 12, 
		RULE_while_statement = 13, RULE_for_init = 14, RULE_for_statement = 15, 
		RULE_function_call_statement = 16, RULE_function_body = 17, RULE_expression = 18, 
		RULE_boolean = 19, RULE_array_access = 20, RULE_number = 21, RULE_factor = 22, 
		RULE_comparison = 23, RULE_extension_function = 24;
	public static readonly string[] ruleNames = {
		"file_declaration", "file", "class", "class_member", "tuple_declaration", 
		"type", "variable_declaration", "function_parameter", "function_declaration", 
		"assignment_statement", "return_statement", "variable_statement", "if_statement", 
		"while_statement", "for_init", "for_statement", "function_call_statement", 
		"function_body", "expression", "boolean", "array_access", "number", "factor", 
		"comparison", "extension_function"
	};

	private static readonly string[] _LiteralNames = {
		null, "'[]'", "'class'", "'{'", "'}'", "'('", "')'", "'['", "']'", "';'", 
		"'->'", null, null, null, null, "'if'", "'else'", null, "'while'", "'for'", 
		"'='", "'<'", "'<='", "'>'", "'>='", null, "'true'", "'false'", "'+'", 
		"'-'", "'*'", "'/'", "'set'", "'get'", "','", "'return'", "'..'", "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, "CLASS", "LEFT_CURLY_BRACE", "RIGHT_CURLY_BRACE", "LEFT_BRACE", 
		"RIGHT_BRACE", "LEFT_BRACKET", "RIGHT_BRACKET", "COLON", "ARROW_RIGHT", 
		"BINARY", "HEX", "INTEGER", "REAL", "IF", "ELSE", "ELSE_IF", "WHILE", 
		"FOR", "EQUAL", "LESS", "LESS_EQUAL", "GREATER", "GREATER_EQUAL", "QUOTED_TEXT", 
		"TRUE", "FALSE", "PLUS", "MINUS", "STAR", "SLASH", "SET", "GET", "COMMA", 
		"RETURN", "RANGE", "DOT", "INTEGER_SUFFIX", "REAL_SUFFIX", "IDENTIFIER", 
		"WHITESPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Nexus.gp4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static NexusParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public NexusParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public NexusParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class File_declarationContext : ParserRuleContext {
		public ClassContext @class() {
			return GetRuleContext<ClassContext>(0);
		}
		public Extension_functionContext extension_function() {
			return GetRuleContext<Extension_functionContext>(0);
		}
		public File_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			INexusListener typedListener = listener as INexusListener;
			if (typedListener != null) typedListener.EnterFile_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INexusListener typedListener = listener as INexusListener;
			if (typedListener != null) typedListener.ExitFile_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INexusVisitor<TResult> typedVisitor = visitor as INexusVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public File_declarationContext file_declaration() {
		File_declarationContext _localctx = new File_declarationContext(Context, State);
		EnterRule(_localctx, 0, RULE_file_declaration);
		try {
			State = 52;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CLASS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 50; @class();
				}
				break;
			case LEFT_BRACE:
			case LEFT_BRACKET:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 51; extension_function();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileContext : ParserRuleContext {
		public File_declarationContext[] file_declaration() {
			return GetRuleContexts<File_declarationContext>();
		}
		public File_declarationContext file_declaration(int i) {
			return GetRuleContext<File_declarationContext>(i);
		}
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		public override void EnterRule(IParseTreeListener listener) {
			INexusListener typedListener = listener as INexusListener;
			if (typedListener != null) typedListener.EnterFile(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INexusListener typedListener = listener as INexusListener;
			if (typedListener != null) typedListener.ExitFile(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INexusVisitor<TResult> typedVisitor = visitor as INexusVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 2, RULE_file);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 57;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CLASS) | (1L << LEFT_BRACE) | (1L << LEFT_BRACKET) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 54; file_declaration();
				}
				}
				State = 59;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassContext : ParserRuleContext {
		public ITerminalNode CLASS() { return GetToken(NexusParser.CLASS, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(NexusParser.IDENTIFIER, 0); }
		public ITerminalNode LEFT_CURLY_BRACE() { return GetToken(NexusParser.LEFT_CURLY_BRACE, 0); }
		public ITerminalNode RIGHT_CURLY_BRACE() { return GetToken(NexusParser.RIGHT_CURLY_BRACE, 0); }
		public Class_memberContext[] class_member() {
			return GetRuleContexts<Class_memberContext>();
		}
		public Class_memberContext class_member(int i) {
			return GetRuleContext<Class_memberContext>(i);
		}
		public ClassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class; } }
		public override void EnterRule(IParseTreeListener listener) {
			INexusListener typedListener = listener as INexusListener;
			if (typedListener != null) typedListener.EnterClass(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INexusListener typedListener = listener as INexusListener;
			if (typedListener != null) typedListener.ExitClass(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INexusVisitor<TResult> typedVisitor = visitor as INexusVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassContext @class() {
		ClassContext _localctx = new ClassContext(Context, State);
		EnterRule(_localctx, 4, RULE_class);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 60; Match(CLASS);
			State = 61; Match(IDENTIFIER);
			State = 62; Match(LEFT_CURLY_BRACE);
			State = 66;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LEFT_BRACE) | (1L << LEFT_BRACKET) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 63; class_member();
				}
				}
				State = 68;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 69; Match(RIGHT_CURLY_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_memberContext : ParserRuleContext {
		public Variable_declarationContext variable_declaration() {
			return GetRuleContext<Variable_declarationContext>(0);
		}
		public Function_declarationContext function_declaration() {
			return GetRuleContext<Function_declarationContext>(0);
		}
		public Class_memberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_member; } }
		public override void EnterRule(IParseTreeListener listener) {
			INexusListener typedListener = listener as INexusListener;
			if (typedListener != null) typedListener.EnterClass_member(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INexusListener typedListener = listener as INexusListener;
			if (typedListener != null) typedListener.ExitClass_member(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INexusVisitor<TResult> typedVisitor = visitor as INexusVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_member(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_memberContext class_member() {
		Class_memberContext _localctx = new Class_memberContext(Context, State);
		EnterRule(_localctx, 6, RULE_class_member);
		try {
			State = 73;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 71; variable_declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 72; function_declaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tuple_declarationContext : ParserRuleContext {
		public ITerminalNode LEFT_BRACE() { return GetToken(NexusParser.LEFT_BRACE, 0); }
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public ITerminalNode RIGHT_BRACE() { return GetToken(NexusParser.RIGHT_BRACE, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(NexusParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(NexusParser.COMMA, i);
		}
		public Tuple_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tuple_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			INexusListener typedListener = listener as INexusListener;
			if (typedListener != null) typedListener.EnterTuple_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INexusListener typedListener = listener as INexusListener;
			if (typedListener != null) typedListener.ExitTuple_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INexusVisitor<TResult> typedVisitor = visitor as INexusVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTuple_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tuple_declarationContext tuple_declaration() {
		Tuple_declarationContext _localctx = new Tuple_declarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_tuple_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 75; Match(LEFT_BRACE);
			State = 76; type();
			State = 81;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 77; Match(COMMA);
				State = 78; type();
				}
				}
				State = 83;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 84; Match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(NexusParser.IDENTIFIER, 0); }
		public Tuple_declarationContext tuple_declaration() {
			return GetRuleContext<Tuple_declarationContext>(0);
		}
		public ITerminalNode LEFT_BRACKET() { return GetToken(NexusParser.LEFT_BRACKET, 0); }
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public ITerminalNode ARROW_RIGHT() { return GetToken(NexusParser.ARROW_RIGHT, 0); }
		public ITerminalNode RIGHT_BRACKET() { return GetToken(NexusParser.RIGHT_BRACKET, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(NexusParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(NexusParser.COMMA, i);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			INexusListener typedListener = listener as INexusListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INexusListener typedListener = listener as INexusListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INexusVisitor<TResult> typedVisitor = visitor as INexusVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 10, RULE_type);
		int _la;
		try {
			State = 117;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 86; Match(IDENTIFIER);
				State = 90;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__0) {
					{
					{
					State = 87; Match(T__0);
					}
					}
					State = 92;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case LEFT_BRACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 93; tuple_declaration();
				State = 97;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__0) {
					{
					{
					State = 94; Match(T__0);
					}
					}
					State = 99;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case LEFT_BRACKET:
				EnterOuterAlt(_localctx, 3);
				{
				State = 100; Match(LEFT_BRACKET);
				State = 101; type();
				State = 102; Match(ARROW_RIGHT);
				State = 106;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 103; Match(COMMA);
					}
					}
					State = 108;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 109; type();
				State = 110; Match(RIGHT_BRACKET);
				State = 114;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__0) {
					{
					{
					State = 111; Match(T__0);
					}
					}
					State = 116;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_declarationContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(NexusParser.IDENTIFIER, 0); }
		public ITerminalNode COLON() { return GetToken(NexusParser.COLON, 0); }
		public ITerminalNode SET() { return GetToken(NexusParser.SET, 0); }
		public ITerminalNode GET() { return GetToken(NexusParser.GET, 0); }
		public ITerminalNode EQUAL() { return GetToken(NexusParser.EQUAL, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Variable_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			INexusListener typedListener = listener as INexusListener;
			if (typedListener != null) typedListener.EnterVariable_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INexusListener typedListener = listener as INexusListener;
			if (typedListener != null) typedListener.ExitVariable_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INexusVisitor<TResult> typedVisitor = visitor as INexusVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_declarationContext variable_declaration() {
		Variable_declarationContext _localctx = new Variable_declarationContext(Context, State);
		EnterRule(_localctx, 12, RULE_variable_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119; type();
			State = 120; Match(IDENTIFIER);
			State = 122;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SET) {
				{
				State = 121; Match(SET);
				}
			}

			State = 125;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==GET) {
				{
				State = 124; Match(GET);
				}
			}

			State = 129;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUAL) {
				{
				State = 127; Match(EQUAL);
				State = 128; expression(0);
				}
			}

			State = 131; Match(COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_parameterContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(NexusParser.IDENTIFIER, 0); }
		public ITerminalNode EQUAL() { return GetToken(NexusParser.EQUAL, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Function_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			INexusListener typedListener = listener as INexusListener;
			if (typedListener != null) typedListener.EnterFunction_parameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INexusListener typedListener = listener as INexusListener;
			if (typedListener != null) typedListener.ExitFunction_parameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INexusVisitor<TResult> typedVisitor = visitor as INexusVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_parameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_parameterContext function_parameter() {
		Function_parameterContext _localctx = new Function_parameterContext(Context, State);
		EnterRule(_localctx, 14, RULE_function_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 133; type();
			State = 134; Match(IDENTIFIER);
			State = 137;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUAL) {
				{
				State = 135; Match(EQUAL);
				State = 136; expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_declarationContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(NexusParser.IDENTIFIER, 0); }
		public ITerminalNode LEFT_BRACE() { return GetToken(NexusParser.LEFT_BRACE, 0); }
		public ITerminalNode RIGHT_BRACE() { return GetToken(NexusParser.RIGHT_BRACE, 0); }
		public ITerminalNode LEFT_CURLY_BRACE() { return GetToken(NexusParser.LEFT_CURLY_BRACE, 0); }
		public ITerminalNode RIGHT_CURLY_BRACE() { return GetToken(NexusParser.RIGHT_CURLY_BRACE, 0); }
		public Function_parameterContext[] function_parameter() {
			return GetRuleContexts<Function_parameterContext>();
		}
		public Function_parameterContext function_parameter(int i) {
			return GetRuleContext<Function_parameterContext>(i);
		}
		public Function_bodyContext[] function_body() {
			return GetRuleContexts<Function_bodyContext>();
		}
		public Function_bodyContext function_body(int i) {
			return GetRuleContext<Function_bodyContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(NexusParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(NexusParser.COMMA, i);
		}
		public Function_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			INexusListener typedListener = listener as INexusListener;
			if (typedListener != null) typedListener.EnterFunction_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INexusListener typedListener = listener as INexusListener;
			if (typedListener != null) typedListener.ExitFunction_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INexusVisitor<TResult> typedVisitor = visitor as INexusVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_declarationContext function_declaration() {
		Function_declarationContext _localctx = new Function_declarationContext(Context, State);
		EnterRule(_localctx, 16, RULE_function_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 139; type();
			State = 140; Match(IDENTIFIER);
			State = 141; Match(LEFT_BRACE);
			State = 150;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LEFT_BRACE) | (1L << LEFT_BRACKET) | (1L << IDENTIFIER))) != 0)) {
				{
				State = 142; function_parameter();
				State = 147;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 143; Match(COMMA);
					State = 144; function_parameter();
					}
					}
					State = 149;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 152; Match(RIGHT_BRACE);
			State = 153; Match(LEFT_CURLY_BRACE);
			State = 157;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LEFT_BRACE) | (1L << LEFT_BRACKET) | (1L << BINARY) | (1L << HEX) | (1L << INTEGER) | (1L << REAL) | (1L << IF) | (1L << WHILE) | (1L << FOR) | (1L << QUOTED_TEXT) | (1L << TRUE) | (1L << FALSE) | (1L << RETURN) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 154; function_body();
				}
				}
				State = 159;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 160; Match(RIGHT_CURLY_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assignment_statementContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode EQUAL() { return GetToken(NexusParser.EQUAL, 0); }
		public ITerminalNode COLON() { return GetToken(NexusParser.COLON, 0); }
		public Assignment_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			INexusListener typedListener = listener as INexusListener;
			if (typedListener != null) typedListener.EnterAssignment_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INexusListener typedListener = listener as INexusListener;
			if (typedListener != null) typedListener.ExitAssignment_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INexusVisitor<TResult> typedVisitor = visitor as INexusVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assignment_statementContext assignment_statement() {
		Assignment_statementContext _localctx = new Assignment_statementContext(Context, State);
		EnterRule(_localctx, 18, RULE_assignment_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 162; expression(0);
			State = 163; Match(EQUAL);
			State = 164; expression(0);
			State = 165; Match(COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_statementContext : ParserRuleContext {
		public ITerminalNode RETURN() { return GetToken(NexusParser.RETURN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(NexusParser.COLON, 0); }
		public Return_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			INexusListener typedListener = listener as INexusListener;
			if (typedListener != null) typedListener.EnterReturn_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INexusListener typedListener = listener as INexusListener;
			if (typedListener != null) typedListener.ExitReturn_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INexusVisitor<TResult> typedVisitor = visitor as INexusVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Return_statementContext return_statement() {
		Return_statementContext _localctx = new Return_statementContext(Context, State);
		EnterRule(_localctx, 20, RULE_return_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 167; Match(RETURN);
			State = 168; expression(0);
			State = 169; Match(COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_statementContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(NexusParser.IDENTIFIER, 0); }
		public ITerminalNode COLON() { return GetToken(NexusParser.COLON, 0); }
		public ITerminalNode EQUAL() { return GetToken(NexusParser.EQUAL, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Variable_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			INexusListener typedListener = listener as INexusListener;
			if (typedListener != null) typedListener.EnterVariable_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INexusListener typedListener = listener as INexusListener;
			if (typedListener != null) typedListener.ExitVariable_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INexusVisitor<TResult> typedVisitor = visitor as INexusVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_statementContext variable_statement() {
		Variable_statementContext _localctx = new Variable_statementContext(Context, State);
		EnterRule(_localctx, 22, RULE_variable_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 171; type();
			State = 172; Match(IDENTIFIER);
			State = 175;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUAL) {
				{
				State = 173; Match(EQUAL);
				State = 174; expression(0);
				}
			}

			State = 177; Match(COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_statementContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(NexusParser.IF, 0); }
		public ITerminalNode LEFT_BRACE() { return GetToken(NexusParser.LEFT_BRACE, 0); }
		public ComparisonContext comparison() {
			return GetRuleContext<ComparisonContext>(0);
		}
		public ITerminalNode RIGHT_BRACE() { return GetToken(NexusParser.RIGHT_BRACE, 0); }
		public ITerminalNode[] LEFT_CURLY_BRACE() { return GetTokens(NexusParser.LEFT_CURLY_BRACE); }
		public ITerminalNode LEFT_CURLY_BRACE(int i) {
			return GetToken(NexusParser.LEFT_CURLY_BRACE, i);
		}
		public ITerminalNode[] RIGHT_CURLY_BRACE() { return GetTokens(NexusParser.RIGHT_CURLY_BRACE); }
		public ITerminalNode RIGHT_CURLY_BRACE(int i) {
			return GetToken(NexusParser.RIGHT_CURLY_BRACE, i);
		}
		public ITerminalNode ELSE() { return GetToken(NexusParser.ELSE, 0); }
		public Function_bodyContext[] function_body() {
			return GetRuleContexts<Function_bodyContext>();
		}
		public Function_bodyContext function_body(int i) {
			return GetRuleContext<Function_bodyContext>(i);
		}
		public If_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			INexusListener typedListener = listener as INexusListener;
			if (typedListener != null) typedListener.EnterIf_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INexusListener typedListener = listener as INexusListener;
			if (typedListener != null) typedListener.ExitIf_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INexusVisitor<TResult> typedVisitor = visitor as INexusVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_statementContext if_statement() {
		If_statementContext _localctx = new If_statementContext(Context, State);
		EnterRule(_localctx, 24, RULE_if_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 179; Match(IF);
			State = 180; Match(LEFT_BRACE);
			State = 181; comparison();
			State = 182; Match(RIGHT_BRACE);
			State = 183; Match(LEFT_CURLY_BRACE);
			State = 187;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LEFT_BRACE) | (1L << LEFT_BRACKET) | (1L << BINARY) | (1L << HEX) | (1L << INTEGER) | (1L << REAL) | (1L << IF) | (1L << WHILE) | (1L << FOR) | (1L << QUOTED_TEXT) | (1L << TRUE) | (1L << FALSE) | (1L << RETURN) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 184; function_body();
				}
				}
				State = 189;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 190; Match(RIGHT_CURLY_BRACE);
			State = 191; Match(ELSE);
			State = 192; Match(LEFT_CURLY_BRACE);
			State = 196;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LEFT_BRACE) | (1L << LEFT_BRACKET) | (1L << BINARY) | (1L << HEX) | (1L << INTEGER) | (1L << REAL) | (1L << IF) | (1L << WHILE) | (1L << FOR) | (1L << QUOTED_TEXT) | (1L << TRUE) | (1L << FALSE) | (1L << RETURN) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 193; function_body();
				}
				}
				State = 198;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 199; Match(RIGHT_CURLY_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class While_statementContext : ParserRuleContext {
		public ITerminalNode WHILE() { return GetToken(NexusParser.WHILE, 0); }
		public ITerminalNode LEFT_BRACE() { return GetToken(NexusParser.LEFT_BRACE, 0); }
		public ComparisonContext comparison() {
			return GetRuleContext<ComparisonContext>(0);
		}
		public ITerminalNode RIGHT_BRACE() { return GetToken(NexusParser.RIGHT_BRACE, 0); }
		public ITerminalNode LEFT_CURLY_BRACE() { return GetToken(NexusParser.LEFT_CURLY_BRACE, 0); }
		public ITerminalNode RIGHT_CURLY_BRACE() { return GetToken(NexusParser.RIGHT_CURLY_BRACE, 0); }
		public Function_bodyContext[] function_body() {
			return GetRuleContexts<Function_bodyContext>();
		}
		public Function_bodyContext function_body(int i) {
			return GetRuleContext<Function_bodyContext>(i);
		}
		public While_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			INexusListener typedListener = listener as INexusListener;
			if (typedListener != null) typedListener.EnterWhile_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INexusListener typedListener = listener as INexusListener;
			if (typedListener != null) typedListener.ExitWhile_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INexusVisitor<TResult> typedVisitor = visitor as INexusVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public While_statementContext while_statement() {
		While_statementContext _localctx = new While_statementContext(Context, State);
		EnterRule(_localctx, 26, RULE_while_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 201; Match(WHILE);
			State = 202; Match(LEFT_BRACE);
			State = 203; comparison();
			State = 204; Match(RIGHT_BRACE);
			State = 205; Match(LEFT_CURLY_BRACE);
			State = 209;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LEFT_BRACE) | (1L << LEFT_BRACKET) | (1L << BINARY) | (1L << HEX) | (1L << INTEGER) | (1L << REAL) | (1L << IF) | (1L << WHILE) | (1L << FOR) | (1L << QUOTED_TEXT) | (1L << TRUE) | (1L << FALSE) | (1L << RETURN) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 206; function_body();
				}
				}
				State = 211;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 212; Match(RIGHT_CURLY_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_initContext : ParserRuleContext {
		public Assignment_statementContext assignment_statement() {
			return GetRuleContext<Assignment_statementContext>(0);
		}
		public Variable_statementContext variable_statement() {
			return GetRuleContext<Variable_statementContext>(0);
		}
		public For_initContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_init; } }
		public override void EnterRule(IParseTreeListener listener) {
			INexusListener typedListener = listener as INexusListener;
			if (typedListener != null) typedListener.EnterFor_init(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INexusListener typedListener = listener as INexusListener;
			if (typedListener != null) typedListener.ExitFor_init(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INexusVisitor<TResult> typedVisitor = visitor as INexusVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor_init(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public For_initContext for_init() {
		For_initContext _localctx = new For_initContext(Context, State);
		EnterRule(_localctx, 28, RULE_for_init);
		try {
			State = 216;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 214; assignment_statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 215; variable_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_statementContext : ParserRuleContext {
		public ITerminalNode FOR() { return GetToken(NexusParser.FOR, 0); }
		public ITerminalNode LEFT_BRACE() { return GetToken(NexusParser.LEFT_BRACE, 0); }
		public For_initContext for_init() {
			return GetRuleContext<For_initContext>(0);
		}
		public ComparisonContext comparison() {
			return GetRuleContext<ComparisonContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(NexusParser.COLON, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RIGHT_BRACE() { return GetToken(NexusParser.RIGHT_BRACE, 0); }
		public ITerminalNode LEFT_CURLY_BRACE() { return GetToken(NexusParser.LEFT_CURLY_BRACE, 0); }
		public ITerminalNode RIGHT_CURLY_BRACE() { return GetToken(NexusParser.RIGHT_CURLY_BRACE, 0); }
		public Function_bodyContext[] function_body() {
			return GetRuleContexts<Function_bodyContext>();
		}
		public Function_bodyContext function_body(int i) {
			return GetRuleContext<Function_bodyContext>(i);
		}
		public For_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			INexusListener typedListener = listener as INexusListener;
			if (typedListener != null) typedListener.EnterFor_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INexusListener typedListener = listener as INexusListener;
			if (typedListener != null) typedListener.ExitFor_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INexusVisitor<TResult> typedVisitor = visitor as INexusVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public For_statementContext for_statement() {
		For_statementContext _localctx = new For_statementContext(Context, State);
		EnterRule(_localctx, 30, RULE_for_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 218; Match(FOR);
			State = 219; Match(LEFT_BRACE);
			State = 220; for_init();
			State = 221; comparison();
			State = 222; Match(COLON);
			State = 223; expression(0);
			State = 224; Match(RIGHT_BRACE);
			State = 225; Match(LEFT_CURLY_BRACE);
			State = 229;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LEFT_BRACE) | (1L << LEFT_BRACKET) | (1L << BINARY) | (1L << HEX) | (1L << INTEGER) | (1L << REAL) | (1L << IF) | (1L << WHILE) | (1L << FOR) | (1L << QUOTED_TEXT) | (1L << TRUE) | (1L << FALSE) | (1L << RETURN) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 226; function_body();
				}
				}
				State = 231;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 232; Match(RIGHT_CURLY_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_call_statementContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(NexusParser.IDENTIFIER, 0); }
		public ITerminalNode LEFT_BRACE() { return GetToken(NexusParser.LEFT_BRACE, 0); }
		public ITerminalNode RIGHT_BRACE() { return GetToken(NexusParser.RIGHT_BRACE, 0); }
		public ITerminalNode COLON() { return GetToken(NexusParser.COLON, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(NexusParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(NexusParser.COMMA, i);
		}
		public Function_call_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_call_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			INexusListener typedListener = listener as INexusListener;
			if (typedListener != null) typedListener.EnterFunction_call_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INexusListener typedListener = listener as INexusListener;
			if (typedListener != null) typedListener.ExitFunction_call_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INexusVisitor<TResult> typedVisitor = visitor as INexusVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_call_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_call_statementContext function_call_statement() {
		Function_call_statementContext _localctx = new Function_call_statementContext(Context, State);
		EnterRule(_localctx, 32, RULE_function_call_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 234; Match(IDENTIFIER);
			State = 235; Match(LEFT_BRACE);
			State = 244;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LEFT_BRACE) | (1L << LEFT_BRACKET) | (1L << BINARY) | (1L << HEX) | (1L << INTEGER) | (1L << REAL) | (1L << QUOTED_TEXT) | (1L << TRUE) | (1L << FALSE) | (1L << IDENTIFIER))) != 0)) {
				{
				State = 236; expression(0);
				State = 241;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 237; Match(COMMA);
					State = 238; expression(0);
					}
					}
					State = 243;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 246; Match(RIGHT_BRACE);
			State = 247; Match(COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_bodyContext : ParserRuleContext {
		public Assignment_statementContext assignment_statement() {
			return GetRuleContext<Assignment_statementContext>(0);
		}
		public Return_statementContext return_statement() {
			return GetRuleContext<Return_statementContext>(0);
		}
		public Function_declarationContext function_declaration() {
			return GetRuleContext<Function_declarationContext>(0);
		}
		public Variable_statementContext variable_statement() {
			return GetRuleContext<Variable_statementContext>(0);
		}
		public If_statementContext if_statement() {
			return GetRuleContext<If_statementContext>(0);
		}
		public While_statementContext while_statement() {
			return GetRuleContext<While_statementContext>(0);
		}
		public For_statementContext for_statement() {
			return GetRuleContext<For_statementContext>(0);
		}
		public Function_call_statementContext function_call_statement() {
			return GetRuleContext<Function_call_statementContext>(0);
		}
		public Function_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			INexusListener typedListener = listener as INexusListener;
			if (typedListener != null) typedListener.EnterFunction_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INexusListener typedListener = listener as INexusListener;
			if (typedListener != null) typedListener.ExitFunction_body(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INexusVisitor<TResult> typedVisitor = visitor as INexusVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_bodyContext function_body() {
		Function_bodyContext _localctx = new Function_bodyContext(Context, State);
		EnterRule(_localctx, 34, RULE_function_body);
		try {
			State = 257;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 249; assignment_statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 250; return_statement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 251; function_declaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 252; variable_statement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 253; if_statement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 254; while_statement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 255; for_statement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 256; function_call_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ITerminalNode LEFT_BRACE() { return GetToken(NexusParser.LEFT_BRACE, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode RIGHT_BRACE() { return GetToken(NexusParser.RIGHT_BRACE, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(NexusParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(NexusParser.COMMA, i);
		}
		public ITerminalNode LEFT_BRACKET() { return GetToken(NexusParser.LEFT_BRACKET, 0); }
		public ITerminalNode RIGHT_BRACKET() { return GetToken(NexusParser.RIGHT_BRACKET, 0); }
		public ITerminalNode[] ARROW_RIGHT() { return GetTokens(NexusParser.ARROW_RIGHT); }
		public ITerminalNode ARROW_RIGHT(int i) {
			return GetToken(NexusParser.ARROW_RIGHT, i);
		}
		public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public ITerminalNode STAR() { return GetToken(NexusParser.STAR, 0); }
		public ITerminalNode SLASH() { return GetToken(NexusParser.SLASH, 0); }
		public ITerminalNode PLUS() { return GetToken(NexusParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(NexusParser.MINUS, 0); }
		public ITerminalNode RANGE() { return GetToken(NexusParser.RANGE, 0); }
		public ITerminalNode EQUAL() { return GetToken(NexusParser.EQUAL, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			INexusListener typedListener = listener as INexusListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INexusListener typedListener = listener as INexusListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INexusVisitor<TResult> typedVisitor = visitor as INexusVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 36;
		EnterRecursionRule(_localctx, 36, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 302;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				{
				State = 260; Match(LEFT_BRACE);
				State = 261; expression(0);
				State = 264;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 262; Match(COMMA);
					State = 263; expression(0);
					}
					}
					State = 266;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==COMMA );
				State = 268; Match(RIGHT_BRACE);
				}
				break;
			case 2:
				{
				State = 270; Match(LEFT_BRACE);
				State = 271; expression(0);
				State = 272; Match(RIGHT_BRACE);
				}
				break;
			case 3:
				{
				State = 274; Match(LEFT_BRACKET);
				State = 275; expression(0);
				State = 280;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 276; Match(COMMA);
					State = 277; expression(0);
					}
					}
					State = 282;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 283; Match(RIGHT_BRACKET);
				}
				break;
			case 4:
				{
				State = 285; Match(LEFT_BRACKET);
				State = 286; expression(0);
				State = 287; Match(ARROW_RIGHT);
				State = 288; expression(0);
				State = 296;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 289; Match(COMMA);
					State = 290; expression(0);
					State = 291; Match(ARROW_RIGHT);
					State = 292; expression(0);
					}
					}
					State = 298;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 299; Match(RIGHT_BRACKET);
				}
				break;
			case 5:
				{
				State = 301; factor();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 324;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 322;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 304;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 305; Match(STAR);
						State = 306; expression(12);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 307;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 308; Match(SLASH);
						State = 309; expression(11);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 310;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 311; Match(PLUS);
						State = 312; expression(10);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 313;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 314; Match(MINUS);
						State = 315; expression(9);
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 316;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 317; Match(RANGE);
						State = 318; expression(4);
						}
						break;
					case 6:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 319;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 320; Match(EQUAL);
						State = 321; expression(3);
						}
						break;
					}
					} 
				}
				State = 326;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BooleanContext : ParserRuleContext {
		public ITerminalNode TRUE() { return GetToken(NexusParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(NexusParser.FALSE, 0); }
		public BooleanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean; } }
		public override void EnterRule(IParseTreeListener listener) {
			INexusListener typedListener = listener as INexusListener;
			if (typedListener != null) typedListener.EnterBoolean(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INexusListener typedListener = listener as INexusListener;
			if (typedListener != null) typedListener.ExitBoolean(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INexusVisitor<TResult> typedVisitor = visitor as INexusVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanContext boolean() {
		BooleanContext _localctx = new BooleanContext(Context, State);
		EnterRule(_localctx, 38, RULE_boolean);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 327;
			_la = TokenStream.LA(1);
			if ( !(_la==TRUE || _la==FALSE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_accessContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(NexusParser.IDENTIFIER, 0); }
		public ITerminalNode LEFT_BRACKET() { return GetToken(NexusParser.LEFT_BRACKET, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RIGHT_BRACKET() { return GetToken(NexusParser.RIGHT_BRACKET, 0); }
		public Array_accessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_access; } }
		public override void EnterRule(IParseTreeListener listener) {
			INexusListener typedListener = listener as INexusListener;
			if (typedListener != null) typedListener.EnterArray_access(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INexusListener typedListener = listener as INexusListener;
			if (typedListener != null) typedListener.ExitArray_access(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INexusVisitor<TResult> typedVisitor = visitor as INexusVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray_access(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Array_accessContext array_access() {
		Array_accessContext _localctx = new Array_accessContext(Context, State);
		EnterRule(_localctx, 40, RULE_array_access);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 329; Match(IDENTIFIER);
			State = 330; Match(LEFT_BRACKET);
			State = 331; expression(0);
			State = 332; Match(RIGHT_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		public ITerminalNode INTEGER() { return GetToken(NexusParser.INTEGER, 0); }
		public ITerminalNode INTEGER_SUFFIX() { return GetToken(NexusParser.INTEGER_SUFFIX, 0); }
		public ITerminalNode REAL() { return GetToken(NexusParser.REAL, 0); }
		public ITerminalNode REAL_SUFFIX() { return GetToken(NexusParser.REAL_SUFFIX, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		public override void EnterRule(IParseTreeListener listener) {
			INexusListener typedListener = listener as INexusListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INexusListener typedListener = listener as INexusListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INexusVisitor<TResult> typedVisitor = visitor as INexusVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 42, RULE_number);
		try {
			State = 342;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTEGER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 334; Match(INTEGER);
				State = 336;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
				case 1:
					{
					State = 335; Match(INTEGER_SUFFIX);
					}
					break;
				}
				}
				break;
			case REAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 338; Match(REAL);
				State = 340;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
				case 1:
					{
					State = 339; Match(REAL_SUFFIX);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public ITerminalNode BINARY() { return GetToken(NexusParser.BINARY, 0); }
		public ITerminalNode HEX() { return GetToken(NexusParser.HEX, 0); }
		public ITerminalNode QUOTED_TEXT() { return GetToken(NexusParser.QUOTED_TEXT, 0); }
		public Array_accessContext array_access() {
			return GetRuleContext<Array_accessContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(NexusParser.IDENTIFIER, 0); }
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
		public override void EnterRule(IParseTreeListener listener) {
			INexusListener typedListener = listener as INexusListener;
			if (typedListener != null) typedListener.EnterFactor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INexusListener typedListener = listener as INexusListener;
			if (typedListener != null) typedListener.ExitFactor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INexusVisitor<TResult> typedVisitor = visitor as INexusVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 44, RULE_factor);
		try {
			State = 351;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 344; number();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 345; boolean();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 346; Match(BINARY);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 347; Match(HEX);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 348; Match(QUOTED_TEXT);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 349; array_access();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 350; Match(IDENTIFIER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode EQUAL() { return GetToken(NexusParser.EQUAL, 0); }
		public ITerminalNode LESS() { return GetToken(NexusParser.LESS, 0); }
		public ITerminalNode LESS_EQUAL() { return GetToken(NexusParser.LESS_EQUAL, 0); }
		public ITerminalNode GREATER() { return GetToken(NexusParser.GREATER, 0); }
		public ITerminalNode GREATER_EQUAL() { return GetToken(NexusParser.GREATER_EQUAL, 0); }
		public ComparisonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison; } }
		public override void EnterRule(IParseTreeListener listener) {
			INexusListener typedListener = listener as INexusListener;
			if (typedListener != null) typedListener.EnterComparison(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INexusListener typedListener = listener as INexusListener;
			if (typedListener != null) typedListener.ExitComparison(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INexusVisitor<TResult> typedVisitor = visitor as INexusVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparison(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonContext comparison() {
		ComparisonContext _localctx = new ComparisonContext(Context, State);
		EnterRule(_localctx, 46, RULE_comparison);
		try {
			State = 373;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 353; expression(0);
				State = 354; Match(EQUAL);
				State = 355; expression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 357; expression(0);
				State = 358; Match(LESS);
				State = 359; expression(0);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 361; expression(0);
				State = 362; Match(LESS_EQUAL);
				State = 363; expression(0);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 365; expression(0);
				State = 366; Match(GREATER);
				State = 367; expression(0);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 369; expression(0);
				State = 370; Match(GREATER_EQUAL);
				State = 371; expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Extension_functionContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode[] IDENTIFIER() { return GetTokens(NexusParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(NexusParser.IDENTIFIER, i);
		}
		public ITerminalNode DOT() { return GetToken(NexusParser.DOT, 0); }
		public ITerminalNode LEFT_BRACE() { return GetToken(NexusParser.LEFT_BRACE, 0); }
		public ITerminalNode RIGHT_BRACE() { return GetToken(NexusParser.RIGHT_BRACE, 0); }
		public ITerminalNode LEFT_CURLY_BRACE() { return GetToken(NexusParser.LEFT_CURLY_BRACE, 0); }
		public ITerminalNode RIGHT_CURLY_BRACE() { return GetToken(NexusParser.RIGHT_CURLY_BRACE, 0); }
		public Function_parameterContext[] function_parameter() {
			return GetRuleContexts<Function_parameterContext>();
		}
		public Function_parameterContext function_parameter(int i) {
			return GetRuleContext<Function_parameterContext>(i);
		}
		public Function_bodyContext[] function_body() {
			return GetRuleContexts<Function_bodyContext>();
		}
		public Function_bodyContext function_body(int i) {
			return GetRuleContext<Function_bodyContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(NexusParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(NexusParser.COMMA, i);
		}
		public Extension_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extension_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			INexusListener typedListener = listener as INexusListener;
			if (typedListener != null) typedListener.EnterExtension_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			INexusListener typedListener = listener as INexusListener;
			if (typedListener != null) typedListener.ExitExtension_function(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INexusVisitor<TResult> typedVisitor = visitor as INexusVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExtension_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Extension_functionContext extension_function() {
		Extension_functionContext _localctx = new Extension_functionContext(Context, State);
		EnterRule(_localctx, 48, RULE_extension_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 375; type();
			State = 376; Match(IDENTIFIER);
			State = 377; Match(DOT);
			State = 378; Match(IDENTIFIER);
			State = 379; Match(LEFT_BRACE);
			State = 388;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LEFT_BRACE) | (1L << LEFT_BRACKET) | (1L << IDENTIFIER))) != 0)) {
				{
				State = 380; function_parameter();
				State = 385;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 381; Match(COMMA);
					State = 382; function_parameter();
					}
					}
					State = 387;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 390; Match(RIGHT_BRACE);
			State = 391; Match(LEFT_CURLY_BRACE);
			State = 395;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LEFT_BRACE) | (1L << LEFT_BRACKET) | (1L << BINARY) | (1L << HEX) | (1L << INTEGER) | (1L << REAL) | (1L << IF) | (1L << WHILE) | (1L << FOR) | (1L << QUOTED_TEXT) | (1L << TRUE) | (1L << FALSE) | (1L << RETURN) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 392; function_body();
				}
				}
				State = 397;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 398; Match(RIGHT_CURLY_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 18: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 11);
		case 1: return Precpred(Context, 10);
		case 2: return Precpred(Context, 9);
		case 3: return Precpred(Context, 8);
		case 4: return Precpred(Context, 3);
		case 5: return Precpred(Context, 2);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '+', '\x193', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x3', 
		'\x2', '\x3', '\x2', '\x5', '\x2', '\x37', '\n', '\x2', '\x3', '\x3', 
		'\a', '\x3', ':', '\n', '\x3', '\f', '\x3', '\xE', '\x3', '=', '\v', '\x3', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', '\x43', 
		'\n', '\x4', '\f', '\x4', '\xE', '\x4', '\x46', '\v', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 'L', '\n', '\x5', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', 'R', 
		'\n', '\x6', '\f', '\x6', '\xE', '\x6', 'U', '\v', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\a', '\x3', '\a', '\a', '\a', '[', '\n', '\a', '\f', 
		'\a', '\xE', '\a', '^', '\v', '\a', '\x3', '\a', '\x3', '\a', '\a', '\a', 
		'\x62', '\n', '\a', '\f', '\a', '\xE', '\a', '\x65', '\v', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\a', '\a', 'k', '\n', '\a', 
		'\f', '\a', '\xE', '\a', 'n', '\v', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\a', '\a', 's', '\n', '\a', '\f', '\a', '\xE', '\a', 'v', '\v', 
		'\a', '\x5', '\a', 'x', '\n', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x5', '\b', '}', '\n', '\b', '\x3', '\b', '\x5', '\b', '\x80', '\n', 
		'\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', '\x84', '\n', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x5', '\t', '\x8C', '\n', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\a', '\n', '\x94', '\n', '\n', 
		'\f', '\n', '\xE', '\n', '\x97', '\v', '\n', '\x5', '\n', '\x99', '\n', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\a', '\n', '\x9E', '\n', 
		'\n', '\f', '\n', '\xE', '\n', '\xA1', '\v', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\xB2', '\n', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\a', '\xE', '\xBC', '\n', '\xE', '\f', '\xE', 
		'\xE', '\xE', '\xBF', '\v', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\a', '\xE', '\xC5', '\n', '\xE', '\f', '\xE', '\xE', 
		'\xE', '\xC8', '\v', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\a', '\xF', '\xD2', '\n', '\xF', '\f', '\xF', '\xE', '\xF', '\xD5', '\v', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x5', 
		'\x10', '\xDB', '\n', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\a', '\x11', '\xE6', '\n', '\x11', '\f', '\x11', '\xE', 
		'\x11', '\xE9', '\v', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\a', '\x12', 
		'\xF2', '\n', '\x12', '\f', '\x12', '\xE', '\x12', '\xF5', '\v', '\x12', 
		'\x5', '\x12', '\xF7', '\n', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\x104', 
		'\n', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x6', '\x14', '\x10B', '\n', '\x14', '\r', '\x14', '\xE', 
		'\x14', '\x10C', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\a', '\x14', '\x119', '\n', '\x14', '\f', '\x14', '\xE', 
		'\x14', '\x11C', '\v', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\a', '\x14', '\x129', '\n', 
		'\x14', '\f', '\x14', '\xE', '\x14', '\x12C', '\v', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x5', '\x14', '\x131', '\n', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\a', '\x14', '\x145', '\n', '\x14', 
		'\f', '\x14', '\xE', '\x14', '\x148', '\v', '\x14', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x17', '\x3', '\x17', '\x5', '\x17', '\x153', '\n', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x5', '\x17', '\x157', '\n', '\x17', '\x5', 
		'\x17', '\x159', '\n', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x5', '\x18', 
		'\x162', '\n', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x5', '\x19', '\x178', '\n', '\x19', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1A', '\a', '\x1A', '\x182', '\n', '\x1A', '\f', 
		'\x1A', '\xE', '\x1A', '\x185', '\v', '\x1A', '\x5', '\x1A', '\x187', 
		'\n', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\a', '\x1A', 
		'\x18C', '\n', '\x1A', '\f', '\x1A', '\xE', '\x1A', '\x18F', '\v', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x2', '\x3', '&', '\x1B', 
		'\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', 
		'\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', 
		',', '.', '\x30', '\x32', '\x2', '\x3', '\x3', '\x2', '\x1C', '\x1D', 
		'\x2', '\x1B7', '\x2', '\x36', '\x3', '\x2', '\x2', '\x2', '\x4', ';', 
		'\x3', '\x2', '\x2', '\x2', '\x6', '>', '\x3', '\x2', '\x2', '\x2', '\b', 
		'K', '\x3', '\x2', '\x2', '\x2', '\n', 'M', '\x3', '\x2', '\x2', '\x2', 
		'\f', 'w', '\x3', '\x2', '\x2', '\x2', '\xE', 'y', '\x3', '\x2', '\x2', 
		'\x2', '\x10', '\x87', '\x3', '\x2', '\x2', '\x2', '\x12', '\x8D', '\x3', 
		'\x2', '\x2', '\x2', '\x14', '\xA4', '\x3', '\x2', '\x2', '\x2', '\x16', 
		'\xA9', '\x3', '\x2', '\x2', '\x2', '\x18', '\xAD', '\x3', '\x2', '\x2', 
		'\x2', '\x1A', '\xB5', '\x3', '\x2', '\x2', '\x2', '\x1C', '\xCB', '\x3', 
		'\x2', '\x2', '\x2', '\x1E', '\xDA', '\x3', '\x2', '\x2', '\x2', ' ', 
		'\xDC', '\x3', '\x2', '\x2', '\x2', '\"', '\xEC', '\x3', '\x2', '\x2', 
		'\x2', '$', '\x103', '\x3', '\x2', '\x2', '\x2', '&', '\x130', '\x3', 
		'\x2', '\x2', '\x2', '(', '\x149', '\x3', '\x2', '\x2', '\x2', '*', '\x14B', 
		'\x3', '\x2', '\x2', '\x2', ',', '\x158', '\x3', '\x2', '\x2', '\x2', 
		'.', '\x161', '\x3', '\x2', '\x2', '\x2', '\x30', '\x177', '\x3', '\x2', 
		'\x2', '\x2', '\x32', '\x179', '\x3', '\x2', '\x2', '\x2', '\x34', '\x37', 
		'\x5', '\x6', '\x4', '\x2', '\x35', '\x37', '\x5', '\x32', '\x1A', '\x2', 
		'\x36', '\x34', '\x3', '\x2', '\x2', '\x2', '\x36', '\x35', '\x3', '\x2', 
		'\x2', '\x2', '\x37', '\x3', '\x3', '\x2', '\x2', '\x2', '\x38', ':', 
		'\x5', '\x2', '\x2', '\x2', '\x39', '\x38', '\x3', '\x2', '\x2', '\x2', 
		':', '=', '\x3', '\x2', '\x2', '\x2', ';', '\x39', '\x3', '\x2', '\x2', 
		'\x2', ';', '<', '\x3', '\x2', '\x2', '\x2', '<', '\x5', '\x3', '\x2', 
		'\x2', '\x2', '=', ';', '\x3', '\x2', '\x2', '\x2', '>', '?', '\a', '\x4', 
		'\x2', '\x2', '?', '@', '\a', '*', '\x2', '\x2', '@', '\x44', '\a', '\x5', 
		'\x2', '\x2', '\x41', '\x43', '\x5', '\b', '\x5', '\x2', '\x42', '\x41', 
		'\x3', '\x2', '\x2', '\x2', '\x43', '\x46', '\x3', '\x2', '\x2', '\x2', 
		'\x44', '\x42', '\x3', '\x2', '\x2', '\x2', '\x44', '\x45', '\x3', '\x2', 
		'\x2', '\x2', '\x45', 'G', '\x3', '\x2', '\x2', '\x2', '\x46', '\x44', 
		'\x3', '\x2', '\x2', '\x2', 'G', 'H', '\a', '\x6', '\x2', '\x2', 'H', 
		'\a', '\x3', '\x2', '\x2', '\x2', 'I', 'L', '\x5', '\xE', '\b', '\x2', 
		'J', 'L', '\x5', '\x12', '\n', '\x2', 'K', 'I', '\x3', '\x2', '\x2', '\x2', 
		'K', 'J', '\x3', '\x2', '\x2', '\x2', 'L', '\t', '\x3', '\x2', '\x2', 
		'\x2', 'M', 'N', '\a', '\a', '\x2', '\x2', 'N', 'S', '\x5', '\f', '\a', 
		'\x2', 'O', 'P', '\a', '$', '\x2', '\x2', 'P', 'R', '\x5', '\f', '\a', 
		'\x2', 'Q', 'O', '\x3', '\x2', '\x2', '\x2', 'R', 'U', '\x3', '\x2', '\x2', 
		'\x2', 'S', 'Q', '\x3', '\x2', '\x2', '\x2', 'S', 'T', '\x3', '\x2', '\x2', 
		'\x2', 'T', 'V', '\x3', '\x2', '\x2', '\x2', 'U', 'S', '\x3', '\x2', '\x2', 
		'\x2', 'V', 'W', '\a', '\b', '\x2', '\x2', 'W', '\v', '\x3', '\x2', '\x2', 
		'\x2', 'X', '\\', '\a', '*', '\x2', '\x2', 'Y', '[', '\a', '\x3', '\x2', 
		'\x2', 'Z', 'Y', '\x3', '\x2', '\x2', '\x2', '[', '^', '\x3', '\x2', '\x2', 
		'\x2', '\\', 'Z', '\x3', '\x2', '\x2', '\x2', '\\', ']', '\x3', '\x2', 
		'\x2', '\x2', ']', 'x', '\x3', '\x2', '\x2', '\x2', '^', '\\', '\x3', 
		'\x2', '\x2', '\x2', '_', '\x63', '\x5', '\n', '\x6', '\x2', '`', '\x62', 
		'\a', '\x3', '\x2', '\x2', '\x61', '`', '\x3', '\x2', '\x2', '\x2', '\x62', 
		'\x65', '\x3', '\x2', '\x2', '\x2', '\x63', '\x61', '\x3', '\x2', '\x2', 
		'\x2', '\x63', '\x64', '\x3', '\x2', '\x2', '\x2', '\x64', 'x', '\x3', 
		'\x2', '\x2', '\x2', '\x65', '\x63', '\x3', '\x2', '\x2', '\x2', '\x66', 
		'g', '\a', '\t', '\x2', '\x2', 'g', 'h', '\x5', '\f', '\a', '\x2', 'h', 
		'l', '\a', '\f', '\x2', '\x2', 'i', 'k', '\a', '$', '\x2', '\x2', 'j', 
		'i', '\x3', '\x2', '\x2', '\x2', 'k', 'n', '\x3', '\x2', '\x2', '\x2', 
		'l', 'j', '\x3', '\x2', '\x2', '\x2', 'l', 'm', '\x3', '\x2', '\x2', '\x2', 
		'm', 'o', '\x3', '\x2', '\x2', '\x2', 'n', 'l', '\x3', '\x2', '\x2', '\x2', 
		'o', 'p', '\x5', '\f', '\a', '\x2', 'p', 't', '\a', '\n', '\x2', '\x2', 
		'q', 's', '\a', '\x3', '\x2', '\x2', 'r', 'q', '\x3', '\x2', '\x2', '\x2', 
		's', 'v', '\x3', '\x2', '\x2', '\x2', 't', 'r', '\x3', '\x2', '\x2', '\x2', 
		't', 'u', '\x3', '\x2', '\x2', '\x2', 'u', 'x', '\x3', '\x2', '\x2', '\x2', 
		'v', 't', '\x3', '\x2', '\x2', '\x2', 'w', 'X', '\x3', '\x2', '\x2', '\x2', 
		'w', '_', '\x3', '\x2', '\x2', '\x2', 'w', '\x66', '\x3', '\x2', '\x2', 
		'\x2', 'x', '\r', '\x3', '\x2', '\x2', '\x2', 'y', 'z', '\x5', '\f', '\a', 
		'\x2', 'z', '|', '\a', '*', '\x2', '\x2', '{', '}', '\a', '\"', '\x2', 
		'\x2', '|', '{', '\x3', '\x2', '\x2', '\x2', '|', '}', '\x3', '\x2', '\x2', 
		'\x2', '}', '\x7F', '\x3', '\x2', '\x2', '\x2', '~', '\x80', '\a', '#', 
		'\x2', '\x2', '\x7F', '~', '\x3', '\x2', '\x2', '\x2', '\x7F', '\x80', 
		'\x3', '\x2', '\x2', '\x2', '\x80', '\x83', '\x3', '\x2', '\x2', '\x2', 
		'\x81', '\x82', '\a', '\x16', '\x2', '\x2', '\x82', '\x84', '\x5', '&', 
		'\x14', '\x2', '\x83', '\x81', '\x3', '\x2', '\x2', '\x2', '\x83', '\x84', 
		'\x3', '\x2', '\x2', '\x2', '\x84', '\x85', '\x3', '\x2', '\x2', '\x2', 
		'\x85', '\x86', '\a', '\v', '\x2', '\x2', '\x86', '\xF', '\x3', '\x2', 
		'\x2', '\x2', '\x87', '\x88', '\x5', '\f', '\a', '\x2', '\x88', '\x8B', 
		'\a', '*', '\x2', '\x2', '\x89', '\x8A', '\a', '\x16', '\x2', '\x2', '\x8A', 
		'\x8C', '\x5', '&', '\x14', '\x2', '\x8B', '\x89', '\x3', '\x2', '\x2', 
		'\x2', '\x8B', '\x8C', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x11', '\x3', 
		'\x2', '\x2', '\x2', '\x8D', '\x8E', '\x5', '\f', '\a', '\x2', '\x8E', 
		'\x8F', '\a', '*', '\x2', '\x2', '\x8F', '\x98', '\a', '\a', '\x2', '\x2', 
		'\x90', '\x95', '\x5', '\x10', '\t', '\x2', '\x91', '\x92', '\a', '$', 
		'\x2', '\x2', '\x92', '\x94', '\x5', '\x10', '\t', '\x2', '\x93', '\x91', 
		'\x3', '\x2', '\x2', '\x2', '\x94', '\x97', '\x3', '\x2', '\x2', '\x2', 
		'\x95', '\x93', '\x3', '\x2', '\x2', '\x2', '\x95', '\x96', '\x3', '\x2', 
		'\x2', '\x2', '\x96', '\x99', '\x3', '\x2', '\x2', '\x2', '\x97', '\x95', 
		'\x3', '\x2', '\x2', '\x2', '\x98', '\x90', '\x3', '\x2', '\x2', '\x2', 
		'\x98', '\x99', '\x3', '\x2', '\x2', '\x2', '\x99', '\x9A', '\x3', '\x2', 
		'\x2', '\x2', '\x9A', '\x9B', '\a', '\b', '\x2', '\x2', '\x9B', '\x9F', 
		'\a', '\x5', '\x2', '\x2', '\x9C', '\x9E', '\x5', '$', '\x13', '\x2', 
		'\x9D', '\x9C', '\x3', '\x2', '\x2', '\x2', '\x9E', '\xA1', '\x3', '\x2', 
		'\x2', '\x2', '\x9F', '\x9D', '\x3', '\x2', '\x2', '\x2', '\x9F', '\xA0', 
		'\x3', '\x2', '\x2', '\x2', '\xA0', '\xA2', '\x3', '\x2', '\x2', '\x2', 
		'\xA1', '\x9F', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA3', '\a', '\x6', 
		'\x2', '\x2', '\xA3', '\x13', '\x3', '\x2', '\x2', '\x2', '\xA4', '\xA5', 
		'\x5', '&', '\x14', '\x2', '\xA5', '\xA6', '\a', '\x16', '\x2', '\x2', 
		'\xA6', '\xA7', '\x5', '&', '\x14', '\x2', '\xA7', '\xA8', '\a', '\v', 
		'\x2', '\x2', '\xA8', '\x15', '\x3', '\x2', '\x2', '\x2', '\xA9', '\xAA', 
		'\a', '%', '\x2', '\x2', '\xAA', '\xAB', '\x5', '&', '\x14', '\x2', '\xAB', 
		'\xAC', '\a', '\v', '\x2', '\x2', '\xAC', '\x17', '\x3', '\x2', '\x2', 
		'\x2', '\xAD', '\xAE', '\x5', '\f', '\a', '\x2', '\xAE', '\xB1', '\a', 
		'*', '\x2', '\x2', '\xAF', '\xB0', '\a', '\x16', '\x2', '\x2', '\xB0', 
		'\xB2', '\x5', '&', '\x14', '\x2', '\xB1', '\xAF', '\x3', '\x2', '\x2', 
		'\x2', '\xB1', '\xB2', '\x3', '\x2', '\x2', '\x2', '\xB2', '\xB3', '\x3', 
		'\x2', '\x2', '\x2', '\xB3', '\xB4', '\a', '\v', '\x2', '\x2', '\xB4', 
		'\x19', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xB6', '\a', '\x11', '\x2', 
		'\x2', '\xB6', '\xB7', '\a', '\a', '\x2', '\x2', '\xB7', '\xB8', '\x5', 
		'\x30', '\x19', '\x2', '\xB8', '\xB9', '\a', '\b', '\x2', '\x2', '\xB9', 
		'\xBD', '\a', '\x5', '\x2', '\x2', '\xBA', '\xBC', '\x5', '$', '\x13', 
		'\x2', '\xBB', '\xBA', '\x3', '\x2', '\x2', '\x2', '\xBC', '\xBF', '\x3', 
		'\x2', '\x2', '\x2', '\xBD', '\xBB', '\x3', '\x2', '\x2', '\x2', '\xBD', 
		'\xBE', '\x3', '\x2', '\x2', '\x2', '\xBE', '\xC0', '\x3', '\x2', '\x2', 
		'\x2', '\xBF', '\xBD', '\x3', '\x2', '\x2', '\x2', '\xC0', '\xC1', '\a', 
		'\x6', '\x2', '\x2', '\xC1', '\xC2', '\a', '\x12', '\x2', '\x2', '\xC2', 
		'\xC6', '\a', '\x5', '\x2', '\x2', '\xC3', '\xC5', '\x5', '$', '\x13', 
		'\x2', '\xC4', '\xC3', '\x3', '\x2', '\x2', '\x2', '\xC5', '\xC8', '\x3', 
		'\x2', '\x2', '\x2', '\xC6', '\xC4', '\x3', '\x2', '\x2', '\x2', '\xC6', 
		'\xC7', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xC9', '\x3', '\x2', '\x2', 
		'\x2', '\xC8', '\xC6', '\x3', '\x2', '\x2', '\x2', '\xC9', '\xCA', '\a', 
		'\x6', '\x2', '\x2', '\xCA', '\x1B', '\x3', '\x2', '\x2', '\x2', '\xCB', 
		'\xCC', '\a', '\x14', '\x2', '\x2', '\xCC', '\xCD', '\a', '\a', '\x2', 
		'\x2', '\xCD', '\xCE', '\x5', '\x30', '\x19', '\x2', '\xCE', '\xCF', '\a', 
		'\b', '\x2', '\x2', '\xCF', '\xD3', '\a', '\x5', '\x2', '\x2', '\xD0', 
		'\xD2', '\x5', '$', '\x13', '\x2', '\xD1', '\xD0', '\x3', '\x2', '\x2', 
		'\x2', '\xD2', '\xD5', '\x3', '\x2', '\x2', '\x2', '\xD3', '\xD1', '\x3', 
		'\x2', '\x2', '\x2', '\xD3', '\xD4', '\x3', '\x2', '\x2', '\x2', '\xD4', 
		'\xD6', '\x3', '\x2', '\x2', '\x2', '\xD5', '\xD3', '\x3', '\x2', '\x2', 
		'\x2', '\xD6', '\xD7', '\a', '\x6', '\x2', '\x2', '\xD7', '\x1D', '\x3', 
		'\x2', '\x2', '\x2', '\xD8', '\xDB', '\x5', '\x14', '\v', '\x2', '\xD9', 
		'\xDB', '\x5', '\x18', '\r', '\x2', '\xDA', '\xD8', '\x3', '\x2', '\x2', 
		'\x2', '\xDA', '\xD9', '\x3', '\x2', '\x2', '\x2', '\xDB', '\x1F', '\x3', 
		'\x2', '\x2', '\x2', '\xDC', '\xDD', '\a', '\x15', '\x2', '\x2', '\xDD', 
		'\xDE', '\a', '\a', '\x2', '\x2', '\xDE', '\xDF', '\x5', '\x1E', '\x10', 
		'\x2', '\xDF', '\xE0', '\x5', '\x30', '\x19', '\x2', '\xE0', '\xE1', '\a', 
		'\v', '\x2', '\x2', '\xE1', '\xE2', '\x5', '&', '\x14', '\x2', '\xE2', 
		'\xE3', '\a', '\b', '\x2', '\x2', '\xE3', '\xE7', '\a', '\x5', '\x2', 
		'\x2', '\xE4', '\xE6', '\x5', '$', '\x13', '\x2', '\xE5', '\xE4', '\x3', 
		'\x2', '\x2', '\x2', '\xE6', '\xE9', '\x3', '\x2', '\x2', '\x2', '\xE7', 
		'\xE5', '\x3', '\x2', '\x2', '\x2', '\xE7', '\xE8', '\x3', '\x2', '\x2', 
		'\x2', '\xE8', '\xEA', '\x3', '\x2', '\x2', '\x2', '\xE9', '\xE7', '\x3', 
		'\x2', '\x2', '\x2', '\xEA', '\xEB', '\a', '\x6', '\x2', '\x2', '\xEB', 
		'!', '\x3', '\x2', '\x2', '\x2', '\xEC', '\xED', '\a', '*', '\x2', '\x2', 
		'\xED', '\xF6', '\a', '\a', '\x2', '\x2', '\xEE', '\xF3', '\x5', '&', 
		'\x14', '\x2', '\xEF', '\xF0', '\a', '$', '\x2', '\x2', '\xF0', '\xF2', 
		'\x5', '&', '\x14', '\x2', '\xF1', '\xEF', '\x3', '\x2', '\x2', '\x2', 
		'\xF2', '\xF5', '\x3', '\x2', '\x2', '\x2', '\xF3', '\xF1', '\x3', '\x2', 
		'\x2', '\x2', '\xF3', '\xF4', '\x3', '\x2', '\x2', '\x2', '\xF4', '\xF7', 
		'\x3', '\x2', '\x2', '\x2', '\xF5', '\xF3', '\x3', '\x2', '\x2', '\x2', 
		'\xF6', '\xEE', '\x3', '\x2', '\x2', '\x2', '\xF6', '\xF7', '\x3', '\x2', 
		'\x2', '\x2', '\xF7', '\xF8', '\x3', '\x2', '\x2', '\x2', '\xF8', '\xF9', 
		'\a', '\b', '\x2', '\x2', '\xF9', '\xFA', '\a', '\v', '\x2', '\x2', '\xFA', 
		'#', '\x3', '\x2', '\x2', '\x2', '\xFB', '\x104', '\x5', '\x14', '\v', 
		'\x2', '\xFC', '\x104', '\x5', '\x16', '\f', '\x2', '\xFD', '\x104', '\x5', 
		'\x12', '\n', '\x2', '\xFE', '\x104', '\x5', '\x18', '\r', '\x2', '\xFF', 
		'\x104', '\x5', '\x1A', '\xE', '\x2', '\x100', '\x104', '\x5', '\x1C', 
		'\xF', '\x2', '\x101', '\x104', '\x5', ' ', '\x11', '\x2', '\x102', '\x104', 
		'\x5', '\"', '\x12', '\x2', '\x103', '\xFB', '\x3', '\x2', '\x2', '\x2', 
		'\x103', '\xFC', '\x3', '\x2', '\x2', '\x2', '\x103', '\xFD', '\x3', '\x2', 
		'\x2', '\x2', '\x103', '\xFE', '\x3', '\x2', '\x2', '\x2', '\x103', '\xFF', 
		'\x3', '\x2', '\x2', '\x2', '\x103', '\x100', '\x3', '\x2', '\x2', '\x2', 
		'\x103', '\x101', '\x3', '\x2', '\x2', '\x2', '\x103', '\x102', '\x3', 
		'\x2', '\x2', '\x2', '\x104', '%', '\x3', '\x2', '\x2', '\x2', '\x105', 
		'\x106', '\b', '\x14', '\x1', '\x2', '\x106', '\x107', '\a', '\a', '\x2', 
		'\x2', '\x107', '\x10A', '\x5', '&', '\x14', '\x2', '\x108', '\x109', 
		'\a', '$', '\x2', '\x2', '\x109', '\x10B', '\x5', '&', '\x14', '\x2', 
		'\x10A', '\x108', '\x3', '\x2', '\x2', '\x2', '\x10B', '\x10C', '\x3', 
		'\x2', '\x2', '\x2', '\x10C', '\x10A', '\x3', '\x2', '\x2', '\x2', '\x10C', 
		'\x10D', '\x3', '\x2', '\x2', '\x2', '\x10D', '\x10E', '\x3', '\x2', '\x2', 
		'\x2', '\x10E', '\x10F', '\a', '\b', '\x2', '\x2', '\x10F', '\x131', '\x3', 
		'\x2', '\x2', '\x2', '\x110', '\x111', '\a', '\a', '\x2', '\x2', '\x111', 
		'\x112', '\x5', '&', '\x14', '\x2', '\x112', '\x113', '\a', '\b', '\x2', 
		'\x2', '\x113', '\x131', '\x3', '\x2', '\x2', '\x2', '\x114', '\x115', 
		'\a', '\t', '\x2', '\x2', '\x115', '\x11A', '\x5', '&', '\x14', '\x2', 
		'\x116', '\x117', '\a', '$', '\x2', '\x2', '\x117', '\x119', '\x5', '&', 
		'\x14', '\x2', '\x118', '\x116', '\x3', '\x2', '\x2', '\x2', '\x119', 
		'\x11C', '\x3', '\x2', '\x2', '\x2', '\x11A', '\x118', '\x3', '\x2', '\x2', 
		'\x2', '\x11A', '\x11B', '\x3', '\x2', '\x2', '\x2', '\x11B', '\x11D', 
		'\x3', '\x2', '\x2', '\x2', '\x11C', '\x11A', '\x3', '\x2', '\x2', '\x2', 
		'\x11D', '\x11E', '\a', '\n', '\x2', '\x2', '\x11E', '\x131', '\x3', '\x2', 
		'\x2', '\x2', '\x11F', '\x120', '\a', '\t', '\x2', '\x2', '\x120', '\x121', 
		'\x5', '&', '\x14', '\x2', '\x121', '\x122', '\a', '\f', '\x2', '\x2', 
		'\x122', '\x12A', '\x5', '&', '\x14', '\x2', '\x123', '\x124', '\a', '$', 
		'\x2', '\x2', '\x124', '\x125', '\x5', '&', '\x14', '\x2', '\x125', '\x126', 
		'\a', '\f', '\x2', '\x2', '\x126', '\x127', '\x5', '&', '\x14', '\x2', 
		'\x127', '\x129', '\x3', '\x2', '\x2', '\x2', '\x128', '\x123', '\x3', 
		'\x2', '\x2', '\x2', '\x129', '\x12C', '\x3', '\x2', '\x2', '\x2', '\x12A', 
		'\x128', '\x3', '\x2', '\x2', '\x2', '\x12A', '\x12B', '\x3', '\x2', '\x2', 
		'\x2', '\x12B', '\x12D', '\x3', '\x2', '\x2', '\x2', '\x12C', '\x12A', 
		'\x3', '\x2', '\x2', '\x2', '\x12D', '\x12E', '\a', '\n', '\x2', '\x2', 
		'\x12E', '\x131', '\x3', '\x2', '\x2', '\x2', '\x12F', '\x131', '\x5', 
		'.', '\x18', '\x2', '\x130', '\x105', '\x3', '\x2', '\x2', '\x2', '\x130', 
		'\x110', '\x3', '\x2', '\x2', '\x2', '\x130', '\x114', '\x3', '\x2', '\x2', 
		'\x2', '\x130', '\x11F', '\x3', '\x2', '\x2', '\x2', '\x130', '\x12F', 
		'\x3', '\x2', '\x2', '\x2', '\x131', '\x146', '\x3', '\x2', '\x2', '\x2', 
		'\x132', '\x133', '\f', '\r', '\x2', '\x2', '\x133', '\x134', '\a', ' ', 
		'\x2', '\x2', '\x134', '\x145', '\x5', '&', '\x14', '\xE', '\x135', '\x136', 
		'\f', '\f', '\x2', '\x2', '\x136', '\x137', '\a', '!', '\x2', '\x2', '\x137', 
		'\x145', '\x5', '&', '\x14', '\r', '\x138', '\x139', '\f', '\v', '\x2', 
		'\x2', '\x139', '\x13A', '\a', '\x1E', '\x2', '\x2', '\x13A', '\x145', 
		'\x5', '&', '\x14', '\f', '\x13B', '\x13C', '\f', '\n', '\x2', '\x2', 
		'\x13C', '\x13D', '\a', '\x1F', '\x2', '\x2', '\x13D', '\x145', '\x5', 
		'&', '\x14', '\v', '\x13E', '\x13F', '\f', '\x5', '\x2', '\x2', '\x13F', 
		'\x140', '\a', '&', '\x2', '\x2', '\x140', '\x145', '\x5', '&', '\x14', 
		'\x6', '\x141', '\x142', '\f', '\x4', '\x2', '\x2', '\x142', '\x143', 
		'\a', '\x16', '\x2', '\x2', '\x143', '\x145', '\x5', '&', '\x14', '\x5', 
		'\x144', '\x132', '\x3', '\x2', '\x2', '\x2', '\x144', '\x135', '\x3', 
		'\x2', '\x2', '\x2', '\x144', '\x138', '\x3', '\x2', '\x2', '\x2', '\x144', 
		'\x13B', '\x3', '\x2', '\x2', '\x2', '\x144', '\x13E', '\x3', '\x2', '\x2', 
		'\x2', '\x144', '\x141', '\x3', '\x2', '\x2', '\x2', '\x145', '\x148', 
		'\x3', '\x2', '\x2', '\x2', '\x146', '\x144', '\x3', '\x2', '\x2', '\x2', 
		'\x146', '\x147', '\x3', '\x2', '\x2', '\x2', '\x147', '\'', '\x3', '\x2', 
		'\x2', '\x2', '\x148', '\x146', '\x3', '\x2', '\x2', '\x2', '\x149', '\x14A', 
		'\t', '\x2', '\x2', '\x2', '\x14A', ')', '\x3', '\x2', '\x2', '\x2', '\x14B', 
		'\x14C', '\a', '*', '\x2', '\x2', '\x14C', '\x14D', '\a', '\t', '\x2', 
		'\x2', '\x14D', '\x14E', '\x5', '&', '\x14', '\x2', '\x14E', '\x14F', 
		'\a', '\n', '\x2', '\x2', '\x14F', '+', '\x3', '\x2', '\x2', '\x2', '\x150', 
		'\x152', '\a', '\xF', '\x2', '\x2', '\x151', '\x153', '\a', '(', '\x2', 
		'\x2', '\x152', '\x151', '\x3', '\x2', '\x2', '\x2', '\x152', '\x153', 
		'\x3', '\x2', '\x2', '\x2', '\x153', '\x159', '\x3', '\x2', '\x2', '\x2', 
		'\x154', '\x156', '\a', '\x10', '\x2', '\x2', '\x155', '\x157', '\a', 
		')', '\x2', '\x2', '\x156', '\x155', '\x3', '\x2', '\x2', '\x2', '\x156', 
		'\x157', '\x3', '\x2', '\x2', '\x2', '\x157', '\x159', '\x3', '\x2', '\x2', 
		'\x2', '\x158', '\x150', '\x3', '\x2', '\x2', '\x2', '\x158', '\x154', 
		'\x3', '\x2', '\x2', '\x2', '\x159', '-', '\x3', '\x2', '\x2', '\x2', 
		'\x15A', '\x162', '\x5', ',', '\x17', '\x2', '\x15B', '\x162', '\x5', 
		'(', '\x15', '\x2', '\x15C', '\x162', '\a', '\r', '\x2', '\x2', '\x15D', 
		'\x162', '\a', '\xE', '\x2', '\x2', '\x15E', '\x162', '\a', '\x1B', '\x2', 
		'\x2', '\x15F', '\x162', '\x5', '*', '\x16', '\x2', '\x160', '\x162', 
		'\a', '*', '\x2', '\x2', '\x161', '\x15A', '\x3', '\x2', '\x2', '\x2', 
		'\x161', '\x15B', '\x3', '\x2', '\x2', '\x2', '\x161', '\x15C', '\x3', 
		'\x2', '\x2', '\x2', '\x161', '\x15D', '\x3', '\x2', '\x2', '\x2', '\x161', 
		'\x15E', '\x3', '\x2', '\x2', '\x2', '\x161', '\x15F', '\x3', '\x2', '\x2', 
		'\x2', '\x161', '\x160', '\x3', '\x2', '\x2', '\x2', '\x162', '/', '\x3', 
		'\x2', '\x2', '\x2', '\x163', '\x164', '\x5', '&', '\x14', '\x2', '\x164', 
		'\x165', '\a', '\x16', '\x2', '\x2', '\x165', '\x166', '\x5', '&', '\x14', 
		'\x2', '\x166', '\x178', '\x3', '\x2', '\x2', '\x2', '\x167', '\x168', 
		'\x5', '&', '\x14', '\x2', '\x168', '\x169', '\a', '\x17', '\x2', '\x2', 
		'\x169', '\x16A', '\x5', '&', '\x14', '\x2', '\x16A', '\x178', '\x3', 
		'\x2', '\x2', '\x2', '\x16B', '\x16C', '\x5', '&', '\x14', '\x2', '\x16C', 
		'\x16D', '\a', '\x18', '\x2', '\x2', '\x16D', '\x16E', '\x5', '&', '\x14', 
		'\x2', '\x16E', '\x178', '\x3', '\x2', '\x2', '\x2', '\x16F', '\x170', 
		'\x5', '&', '\x14', '\x2', '\x170', '\x171', '\a', '\x19', '\x2', '\x2', 
		'\x171', '\x172', '\x5', '&', '\x14', '\x2', '\x172', '\x178', '\x3', 
		'\x2', '\x2', '\x2', '\x173', '\x174', '\x5', '&', '\x14', '\x2', '\x174', 
		'\x175', '\a', '\x1A', '\x2', '\x2', '\x175', '\x176', '\x5', '&', '\x14', 
		'\x2', '\x176', '\x178', '\x3', '\x2', '\x2', '\x2', '\x177', '\x163', 
		'\x3', '\x2', '\x2', '\x2', '\x177', '\x167', '\x3', '\x2', '\x2', '\x2', 
		'\x177', '\x16B', '\x3', '\x2', '\x2', '\x2', '\x177', '\x16F', '\x3', 
		'\x2', '\x2', '\x2', '\x177', '\x173', '\x3', '\x2', '\x2', '\x2', '\x178', 
		'\x31', '\x3', '\x2', '\x2', '\x2', '\x179', '\x17A', '\x5', '\f', '\a', 
		'\x2', '\x17A', '\x17B', '\a', '*', '\x2', '\x2', '\x17B', '\x17C', '\a', 
		'\'', '\x2', '\x2', '\x17C', '\x17D', '\a', '*', '\x2', '\x2', '\x17D', 
		'\x186', '\a', '\a', '\x2', '\x2', '\x17E', '\x183', '\x5', '\x10', '\t', 
		'\x2', '\x17F', '\x180', '\a', '$', '\x2', '\x2', '\x180', '\x182', '\x5', 
		'\x10', '\t', '\x2', '\x181', '\x17F', '\x3', '\x2', '\x2', '\x2', '\x182', 
		'\x185', '\x3', '\x2', '\x2', '\x2', '\x183', '\x181', '\x3', '\x2', '\x2', 
		'\x2', '\x183', '\x184', '\x3', '\x2', '\x2', '\x2', '\x184', '\x187', 
		'\x3', '\x2', '\x2', '\x2', '\x185', '\x183', '\x3', '\x2', '\x2', '\x2', 
		'\x186', '\x17E', '\x3', '\x2', '\x2', '\x2', '\x186', '\x187', '\x3', 
		'\x2', '\x2', '\x2', '\x187', '\x188', '\x3', '\x2', '\x2', '\x2', '\x188', 
		'\x189', '\a', '\b', '\x2', '\x2', '\x189', '\x18D', '\a', '\x5', '\x2', 
		'\x2', '\x18A', '\x18C', '\x5', '$', '\x13', '\x2', '\x18B', '\x18A', 
		'\x3', '\x2', '\x2', '\x2', '\x18C', '\x18F', '\x3', '\x2', '\x2', '\x2', 
		'\x18D', '\x18B', '\x3', '\x2', '\x2', '\x2', '\x18D', '\x18E', '\x3', 
		'\x2', '\x2', '\x2', '\x18E', '\x190', '\x3', '\x2', '\x2', '\x2', '\x18F', 
		'\x18D', '\x3', '\x2', '\x2', '\x2', '\x190', '\x191', '\a', '\x6', '\x2', 
		'\x2', '\x191', '\x33', '\x3', '\x2', '\x2', '\x2', '*', '\x36', ';', 
		'\x44', 'K', 'S', '\\', '\x63', 'l', 't', 'w', '|', '\x7F', '\x83', '\x8B', 
		'\x95', '\x98', '\x9F', '\xB1', '\xBD', '\xC6', '\xD3', '\xDA', '\xE7', 
		'\xF3', '\xF6', '\x103', '\x10C', '\x11A', '\x12A', '\x130', '\x144', 
		'\x146', '\x152', '\x156', '\x158', '\x161', '\x177', '\x183', '\x186', 
		'\x18D',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
